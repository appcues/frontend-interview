"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("./Button.js"));

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: inline-block;\n  padding: 10px 0;\n\n  .button {\n    &.button-group-button--selected + .button-group-button {\n      border-left: 0px;\n    }\n\n    &.button-group-button {\n      box-sizing: border-box;\n      border-right: 0px;\n      border-left: 1px solid ", ";\n      border-radius: 0px;\n      padding-left: 50px;\n      padding-right: 50px;\n\n      &:first-child {\n        border-top-left-radius: 4px;\n        border-bottom-left-radius: 4px;\n      }\n\n      &:last-child {\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n        border-right: 1px solid ", ";\n      }\n\n      &:hover {\n        border-color: ", ";\n        color: ", ";\n      }\n\n      &--selected {\n        background-color: ", ";\n        border: 1px solid ", ";\n        border-radius: 4px;\n        color: white;\n\n        &:first-child {\n          border-right: 0px;\n          border-top-right-radius: 0px;\n          border-bottom-right-radius: 0px;\n        }\n\n        &:last-child {\n          border-left: 0px;\n          border-top-left-radius: 0px;\n          border-bottom-left-radius: 0px;\n          border-right: 1px solid ", ";\n        }\n\n        &:hover {\n          border-color: ", ";\n          color: white;\n          cursor: default;\n        }\n\n        &:only-child {\n          border-radius: 4px;\n        }\n\n        &:not(:first-child):not(:last-child) {\n          border-left-width: 1px;\n          border-right-width: 1px;\n          border-radius: 0px;\n        }\n      }\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var createOptionMemo = function createOptionMemo(options, onSelect) {
  var memo = {};
  options.forEach(function (option) {
    memo[option.key] = function () {
      return onSelect(option.key);
    };
  });
  return memo;
};

var ButtonGroup = function (_Component) {
  (0, _chunkB2edacfb.f)(ButtonGroup, _Component);

  function ButtonGroup(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, ButtonGroup);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(ButtonGroup).call(this, props));
    var onSelect = props.onSelect,
        options = props.options;
    _this.optionMemo = createOptionMemo(options, onSelect);
    return _this;
  }

  (0, _chunkB2edacfb.c)(ButtonGroup, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var onSelect = nextProps.onSelect,
          options = nextProps.options;

      if (this.props.options !== options) {
        this.optionMemo = createOptionMemo(options, onSelect);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          options = _this$props.options,
          selected = _this$props.selected,
          onSelect = _this$props.onSelect,
          className = _this$props.className;
      var optionMemo = this.optionMemo;
      return _react.default.createElement(StyledButtonGroup, {
        className: (0, _classnames.default)(className, "button-group")
      }, options.map(function (_ref) {
        var key = _ref.key,
            value = _ref.value;
        var classes = {
          "button-group-button": true
        };

        if (key === selected) {
          classes["button-group-button--selected"] = true;
        }

        return _react.default.createElement(_Button.default, {
          key: key,
          className: (0, _classnames.default)(classes),
          onClick: optionMemo[key]
        }, value);
      }));
    }
  }]);
  return ButtonGroup;
}(_react.Component);

ButtonGroup.propTypes = {
  className: _propTypes.default.string,
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.node])
  })),
  selected: _propTypes.default.string,
  onSelect: _propTypes.default.func
};
ButtonGroup.defaultProps = {
  options: [],
  selected: null,
  onSelect: function onSelect() {}
};

var StyledButtonGroup = _styledComponents.default.section.withConfig({
  displayName: "ButtonGroup__StyledButtonGroup",
  componentId: "sc-1fpclic-0"
})(_templateObject(), function (props) {
  return props.theme["$gray-30"];
}, function (props) {
  return props.theme["$gray-30"];
}, function (props) {
  return props.theme["$gray-70"];
}, function (props) {
  return props.theme["$gray-70"];
}, function (props) {
  return props.theme["$brand-primary"];
}, function (props) {
  return props.theme["$brand-primary"];
}, function (props) {
  return props.theme["$brand-primary"];
}, function (props) {
  return props.theme["$brand-primary"];
});

ButtonGroup.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "ButtonGroup",
  "props": {
    "options": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "key": {
              "name": "string",
              "required": false
            },
            "value": {
              "name": "union",
              "value": [{
                "name": "string"
              }, {
                "name": "number"
              }, {
                "name": "node"
              }],
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": ""
    },
    "selected": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onSelect": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = ButtonGroup;
exports.default = _default;