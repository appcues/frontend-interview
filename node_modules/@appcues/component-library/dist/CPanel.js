"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withPanelStyle = exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _layout = require("./layout.js");

var _type = require("./type.js");

var _PanelBG = _interopRequireDefault(require("./PanelBG.js"));

var _PanelHeader = _interopRequireDefault(require("./PanelHeader.js"));

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  ", "\n  position: relative;\n  width: 100%;\n  padding: 25px 24px;\n  min-width: 350px;\n  display: flex;\n  flex-direction: column;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var CPanel = function CPanel(_ref) {
  var children = _ref.children,
      title = _ref.title,
      className = _ref.className,
      boxProps = (0, _chunkB2edacfb.j)(_ref, ["children", "title", "className"]);
  return _react.default.createElement(StyledPanel, (0, _chunkB2edacfb.g)({}, boxProps, {
    className: (0, _classnames.default)("cpanel", className)
  }), title && _react.default.createElement(CPanel.Header, null, _react.default.createElement(_type.H2, null, title)), children);
};

var panelStyle = (0, _styledComponents.css)(["background-color:white;border-radius:6px;box-shadow:", ";"], function (props) {
  return props.theme["$box-shadow-1"];
});

var withPanelStyle = function withPanelStyle(component) {
  return (0, _styledComponents.default)(component).withConfig({
    displayName: "CPanel",
    componentId: "sc-1vv29jc-0"
  })(_templateObject(), panelStyle);
};

exports.withPanelStyle = withPanelStyle;
var StyledPanel = (0, _styledComponents.default)(_layout.Box).withConfig({
  displayName: "CPanel__StyledPanel",
  componentId: "sc-1vv29jc-1"
})(_templateObject2(), panelStyle);
CPanel.displayName = "CPanel";
CPanel.propTypes = {
  title: _propTypes.default.string,
  alignItems: _propTypes.default.string
};
CPanel.defaultProps = {
  title: "",
  alignItems: "stretch"
};
CPanel.BG = _PanelBG.default;
CPanel.Header = _PanelHeader.default;
CPanel.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CPanel",
  "props": {
    "title": {
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "alignItems": {
      "defaultValue": {
        "value": "\"stretch\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CPanel;
exports.default = _default;
CPanel.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CPanel",
  "props": {
    "title": {
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "alignItems": {
      "defaultValue": {
        "value": "\"stretch\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};