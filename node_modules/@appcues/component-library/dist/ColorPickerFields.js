"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorPickerFields = exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireDefault(require("react"));

var _ColorPickerInput5631f = require("./ColorPickerInput-5631f400.js");

var _CIconButton = _interopRequireDefault(require("./CIconButton.js"));

var _colorutils997790c = require("./colorutils-997790c4.js");

require("./chunk-76875e58.js");

require("./chunk-8219403d.js");

require("styled-components");

require("classnames");

require("./CButton.js");

require("prop-types");

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ColorPickerFields = function (_React$Component) {
  (0, _chunkB2edacfb.f)(ColorPickerFields, _React$Component);

  function ColorPickerFields() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, ColorPickerFields);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(ColorPickerFields)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "state", {
      view: ""
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "toggleViews", function () {
      if (_this.state.view === "hex") {
        _this.setState({
          view: "rgb"
        });
      } else if (_this.state.view === "rgb") {
        _this.setState({
          view: "hsl"
        });
      } else if (_this.state.view === "hsl") {
        if (_this.props.hsl.a === 1) {
          _this.setState({
            view: "hex"
          });
        } else {
          _this.setState({
            view: "rgb"
          });
        }
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleChange", function (data, e) {
      if (data.hex) {
        (0, _colorutils997790c.b)(data.hex) && _this.props.onChange({
          hex: data.hex,
          source: "hex"
        }, e);
      } else if (data.r || data.g || data.b) {
        _this.props.onChange({
          r: data.r || _this.props.rgb.r,
          g: data.g || _this.props.rgb.g,
          b: data.b || _this.props.rgb.b,
          source: "rgb"
        }, e);
      } else if (data.a) {
        if (data.a < 0) {
          data.a = 0;
        } else if (data.a > 1) {
          data.a = 1;
        }

        _this.props.onChange({
          h: _this.props.hsl.h,
          s: _this.props.hsl.s,
          l: _this.props.hsl.l,
          a: Math.round(data.a * 100) / 100,
          source: "rgb"
        }, e);
      } else if (data.h || data.s || data.l) {
        if (typeof data.s === "string" && data.s.includes("%")) {
          data.s = data.s.replace("%", "");
        }

        if (typeof data.l === "string" && data.l.includes("%")) {
          data.l = data.l.replace("%", "");
        }

        _this.props.onChange({
          h: data.h || _this.props.hsl.h,
          s: Number(data.s && data.s || _this.props.hsl.s),
          l: Number(data.l && data.l || _this.props.hsl.l),
          source: "hsl"
        }, e);
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "showHighlight", function (e) {
      e.currentTarget.style.background = "#eee";
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "hideHighlight", function (e) {
      e.currentTarget.style.background = "transparent";
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(ColorPickerFields, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.hsl.a === 1 && this.state.view !== "hex") {
        this.setState({
          view: "hex"
        });
      } else if (this.state.view !== "rgb" && this.state.view !== "hsl") {
        this.setState({
          view: "rgb"
        });
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.hsl.a !== 1 && this.state.view === "hex") {
        this.setState({
          view: "rgb"
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var styles = (0, _ColorPickerInput5631f.D)({
        default: {
          wrap: {
            paddingTop: "16px",
            display: "flex",
            alignItems: "start"
          },
          fields: {
            flex: "1",
            display: "flex",
            marginLeft: "-6px"
          },
          field: {
            paddingLeft: "6px",
            width: "100%"
          },
          alpha: {
            paddingLeft: "6px",
            width: "100%"
          },
          toggle: {
            width: "32px",
            textAlign: "right",
            position: "relative"
          },
          icon: {
            marginRight: "-4px",
            marginTop: "12px",
            cursor: "pointer",
            position: "relative"
          },
          iconHighlight: {
            position: "absolute",
            width: "24px",
            height: "28px",
            background: "#eee",
            borderRadius: "4px",
            top: "10px",
            left: "12px",
            display: "none"
          },
          input: {
            fontSize: "14px",
            color: "#333",
            width: "100%",
            borderRadius: "4px",
            border: "none",
            boxShadow: "inset 0 0 0 1px #dadada",
            height: "30px",
            textAlign: "center"
          },
          label: {
            textTransform: "uppercase",
            fontSize: "11px",
            lineHeight: "11px",
            color: "#969696",
            textAlign: "center",
            display: "block",
            marginTop: "12px"
          },
          svg: {
            fill: "#333",
            width: "24px",
            height: "24px",
            border: "1px transparent solid",
            borderRadius: "5px"
          }
        }
      }, this.props, this.state);
      var fields;

      if (this.state.view === "hex") {
        fields = _react.default.createElement("div", {
          style: styles.fields,
          className: "flexbox-fix"
        }, _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "hex",
          value: this.props.hex,
          onChange: this.handleChange
        })));
      } else if (this.state.view === "rgb" && this.props.alphaValues) {
        fields = _react.default.createElement("div", {
          style: styles.fields,
          className: "flexbox-fix"
        }, _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "r",
          value: this.props.rgb.r,
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "g",
          value: this.props.rgb.g,
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "b",
          value: this.props.rgb.b,
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.alpha
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "a",
          value: this.props.rgb.a,
          arrowOffset: 0.01,
          onChange: this.handleChange
        })));
      } else if (this.state.view === "hsl" && this.props.alphaValues) {
        fields = _react.default.createElement("div", {
          style: styles.fields,
          className: "flexbox-fix"
        }, _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "h",
          value: Math.round(this.props.hsl.h),
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "s",
          value: "".concat(Math.round(this.props.hsl.s * 100), "%"),
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.field
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "l",
          value: "".concat(Math.round(this.props.hsl.l * 100), "%"),
          onChange: this.handleChange
        })), _react.default.createElement("div", {
          style: styles.alpha
        }, _react.default.createElement(_ColorPickerInput5631f.E, {
          style: {
            input: styles.input,
            label: styles.label
          },
          label: "a",
          value: this.props.hsl.a,
          arrowOffset: 0.01,
          onChange: this.handleChange
        })));
      }

      return _react.default.createElement("div", {
        style: styles.wrap,
        className: "flexbox-fix"
      }, fields, this.props.alphaValues && _react.default.createElement("div", {
        style: styles.toggle
      }, _react.default.createElement(_CIconButton.default, {
        border: "0",
        transparent: true,
        onClick: this.toggleViews,
        className: "fas fa-sort"
      })));
    }
  }]);
  return ColorPickerFields;
}(_react.default.Component);

exports.ColorPickerFields = ColorPickerFields;
ColorPickerFields.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "toggleViews",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "data",
      "type": null
    }, {
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "showHighlight",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "hideHighlight",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "ColorPickerFields"
};
var _default = ColorPickerFields;
exports.default = _default;