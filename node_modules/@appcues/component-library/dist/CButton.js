"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _layout = require("./layout.js");

var _chunkE = require("./chunk-e8276423.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  min-width: 72px;\n\n  display: inline-block;\n  padding: 0.5rem 0.875rem;\n  border-radius: ", ";\n  border: 1px solid transparent;\n\n  font-family: ", ";\n  font-size: 1rem;\n  font-weight: 500;\n  color: white;\n\n  cursor: pointer;\n  text-decoration: none;\n  user-select: none;\n  outline: none;\n\n  transition: border-color 0.2s ease, background-color 0.2s ease;\n\n  i {\n    color: ", ";\n    margin-right: 10px;\n    transition: color 0.2s ease;\n  }\n\n  &:hover {\n    i {\n      color: white;\n    }\n  }\n\n  &.isDisabled {\n    pointer-events: none;\n    color: ", ";\n  }\n\n  &.primary {\n    background-color: ", ";\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      background-color: ", ";\n    }\n\n    &.isDisabled {\n      background-color: ", ";\n    }\n  }\n\n  &.warning {\n    background-color: ", ";\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      background-color: ", ";\n    }\n\n    &.isDisabled {\n      background-color: ", ";\n    }\n  }\n\n  &.info {\n    background-color: ", ";\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      background-color: ", ";\n    }\n\n    &.isDisabled {\n      background-color: ", ";\n    }\n  }\n\n  &.positive {\n    background-color: ", ";\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      background-color: ", ";\n    }\n\n    &.isDisabled {\n      background-color: ", ";\n    }\n  }\n\n  &.negative {\n    background-color: ", ";\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      background-color: ", ";\n    }\n\n    &.isDisabled {\n      background-color: ", ";\n    }\n  }\n\n  &.secondary {\n    color: ", ";\n    border-color: ", ";\n    background-color: white;\n\n    i {\n      color: ", ";\n    }\n\n    &:focus,\n    &:active,\n    &:hover,\n    &.forceHover {\n      color: ", ";\n      border-color: ", ";\n\n      i {\n        color: ", ";\n      }\n    }\n\n    &.isDisabled {\n      color: ", ";\n      background-color: ", ";\n    }\n\n    &.transparent {\n      background-color: transparent;\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var TYPES = {
  PRIMARY: "primary",
  SECONDARY: "secondary",
  POSITIVE: "positive",
  NEGATIVE: "negative",
  WARNING: "warning",
  INFO: "info"
};

var ButtonType = _propTypes.default.oneOf(Object.values(TYPES));

var CButton = function (_PureComponent) {
  (0, _chunkB2edacfb.f)(CButton, _PureComponent);

  function CButton() {
    (0, _chunkB2edacfb.b)(this, CButton);
    return (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(CButton).apply(this, arguments));
  }

  (0, _chunkB2edacfb.c)(CButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          isDisabled = _this$props.isDisabled,
          disabled = _this$props.disabled,
          isExternal = _this$props.isExternal,
          ignoreWarning = _this$props.ignoreWarning,
          forceHover = _this$props.forceHover,
          type = _this$props.type,
          transparent = _this$props.transparent,
          className = _this$props.className,
          htmlType = _this$props.htmlType,
          componentProps = (0, _chunkB2edacfb.j)(_this$props, ["isDisabled", "disabled", "isExternal", "ignoreWarning", "forceHover", "type", "transparent", "className", "htmlType"]);
      var overrideProps = {
        className: (0, _classnames.default)(className, type, transparent && "transparent", forceHover && "forceHover", (isDisabled || disabled) && "isDisabled"),
        type: htmlType
      };
      var hasHref = !!componentProps.href;
      var isHrefInvalid = hasHref && (componentProps.href.includes("https://") || componentProps.href.includes("http://"));

      if (isExternal) {
        overrideProps.target = "_blank";
        overrideProps.rel = "noopener noreferrer";
      }

      return _react.default.createElement(StyledButton, (0, _chunkB2edacfb.g)({
        is: "button"
      }, overrideProps, componentProps, {
        tabIndex: isDisabled || disabled ? -1 : 0,
        disabled: isDisabled || disabled
      }));
    }
  }]);
  return CButton;
}(_react.PureComponent);

(0, _chunkB2edacfb.h)(CButton, "displayName", "CButton");
(0, _chunkB2edacfb.h)(CButton, "propTypes", {
  onClick: _propTypes.default.func,
  href: _propTypes.default.string,
  type: ButtonType,
  htmlType: _propTypes.default.string,
  isDisabled: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  isExternal: _propTypes.default.bool,
  transparent: _propTypes.default.bool,
  ignoreWarning: _propTypes.default.bool,
  forceHover: _propTypes.default.bool,
  is: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func])
});
(0, _chunkB2edacfb.h)(CButton, "defaultProps", {
  type: TYPES.SECONDARY,
  isDisabled: false,
  disabled: false,
  isExternal: false,
  transparent: false,
  ignoreWarning: false,
  forceHover: false,
  htmlType: "button",
  is: "button"
});
(0, _chunkB2edacfb.h)(CButton, "enums", {
  ButtonType: TYPES
});
var StyledButton = (0, _styledComponents.default)(_layout.Box).withConfig({
  displayName: "CButton__StyledButton",
  componentId: "g9rusn-0"
})(_templateObject(), function (props) {
  return props.theme["$border-radius"];
}, function (props) {
  return props.theme["$font-body"];
}, function (props) {
  return props.theme["$light-tint-70"];
}, function (props) {
  return props.theme["$light-tint-70"];
}, function (props) {
  return props.theme["$purple"];
}, function (props) {
  return props.theme["$purple-dark"];
}, function (props) {
  return (0, _chunkE.a)(0.4, props.theme["$purple"]);
}, function (props) {
  return props.theme["$yellow-xtradark"];
}, function (props) {
  return (0, _chunkE.c)(0.1, props.theme["$yellow-xtradark"]);
}, function (props) {
  return (0, _chunkE.a)(0.4, props.theme["$yellow-xtradark"]);
}, function (props) {
  return props.theme["$blue-dark"];
}, function (props) {
  return props.theme["$blue-xtradark"];
}, function (props) {
  return (0, _chunkE.a)(0.4, props.theme["$blue-dark"]);
}, function (props) {
  return props.theme["$green-dark"];
}, function (props) {
  return props.theme["$green-xtradark"];
}, function (props) {
  return (0, _chunkE.a)(0.4, props.theme["$green-dark"]);
}, function (props) {
  return props.theme["$red"];
}, function (props) {
  return props.theme["$red-dark"];
}, function (props) {
  return (0, _chunkE.a)(0.4, props.theme["$red"]);
}, function (props) {
  return props.theme["$gray-7"];
}, function (props) {
  return props.theme["$gray-3"];
}, function (props) {
  return props.theme["$gray-5"];
}, function (props) {
  return props.theme["$gray-8"];
}, function (props) {
  return props.theme["$gray-5"];
}, function (props) {
  return props.theme["$gray-6"];
}, function (props) {
  return props.theme["$gray-4"];
}, function (props) {
  return props.theme["$gray-1"];
});
CButton.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CButton",
  "props": {
    "type": {
      "defaultValue": {
        "value": "\"secondary\"",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "ButtonType"
      },
      "required": false,
      "description": ""
    },
    "isDisabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "disabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isExternal": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "transparent": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "ignoreWarning": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "forceHover": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "htmlType": {
      "defaultValue": {
        "value": "\"button\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "is": {
      "defaultValue": {
        "value": "\"button\"",
        "computed": false
      },
      "type": {
        "name": "union",
        "value": [{
          "name": "string"
        }, {
          "name": "func"
        }]
      },
      "required": false,
      "description": ""
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "href": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CButton;
exports.default = _default;