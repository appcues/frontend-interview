"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _CFontIcon = _interopRequireDefault(require("./CFontIcon.js"));

var _CButton = _interopRequireDefault(require("./CButton.js"));

var _CColorPicker = _interopRequireDefault(require("./CColorPicker.js"));

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

require("classnames");

require("./ColorPickerInput-5631f400.js");

require("./colorutils-997790c4.js");

require("./ColorPickerFields.js");

require("./CIconButton.js");

require("./ColorPickerSwatches.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject4() {
  var data = (0, _chunkB2edacfb.a)(["\n  color: ", ";\n  .svg-inline--fa {\n    color: ", ";\n  }\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: block;\n  height: 20px;\n  width: 20px;\n  border-radius: 30px;\n  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3);\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: relative;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  min-height: 38px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var rgbTypes = _propTypes.default.shape({
  r: _propTypes.default.string,
  g: _propTypes.default.string,
  b: _propTypes.default.string,
  a: _propTypes.default.string
});

var hexType = _propTypes.default.shape({
  hex: _propTypes.default.string
});

var hslTypes = _propTypes.default.shape({
  h: _propTypes.default.string,
  s: _propTypes.default.string,
  l: _propTypes.default.string
});

var CColorPickerDropdown = function (_Component) {
  (0, _chunkB2edacfb.f)(CColorPickerDropdown, _Component);

  function CColorPickerDropdown() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, CColorPickerDropdown);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(CColorPickerDropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "state", {
      displayColorPicker: false,
      rgb: {
        r: "",
        g: "",
        b: "",
        a: ""
      },
      hex: "",
      hsl: ""
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleClickOutside", function (event) {
      var domNode = _reactDom.default.findDOMNode((0, _chunkB2edacfb.m)(_this));

      if ((!domNode || !domNode.contains(event.target)) && _this.state.displayColorPicker) {
        _this.handleClose();
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleClick", function () {
      _this.setState({
        displayColorPicker: !_this.state.displayColorPicker
      });
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleClose", function () {
      _this.setState({
        displayColorPicker: false
      });
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleUpdate", function (color, e) {
      _this.props.onChange(color, e);

      _this.setState({
        rgb: color.rgb,
        hex: color.hex,
        hsl: color.hsl
      });
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(CColorPickerDropdown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener("click", this.handleClickOutside, true);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener("click", this.handleClickOutside, true);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          hex = _this$state.hex,
          displayColorPicker = _this$state.displayColorPicker;
      var colorState = this.props.colorState || hex;
      return _react.default.createElement(ColorPickerContainer, null, _react.default.createElement(ColorPickerButton, (0, _chunkB2edacfb.g)({
        position: "relative",
        display: "inline-flex"
      }, this.props, {
        onClick: this.handleClick
      }), this.props.children ? _react.default.createElement(CustomWrapper, {
        color: colorState
      }, this.props.children) : _react.default.createElement(Circle, {
        style: {
          backgroundColor: colorState
        }
      }), _react.default.createElement(_CFontIcon.default, {
        position: "absolute",
        right: "4px",
        top: "5px",
        fontSize: "20px",
        className: "fas fa-caret-down"
      })), displayColorPicker && _react.default.createElement(_CColorPicker.default, {
        position: "absolute",
        left: "0",
        top: "110%",
        alphaValues: this.props.alphaValues,
        onChangeComplete: this.handleUpdate,
        color: this.props.colorState,
        swatches: this.props.swatches
      }));
    }
  }]);
  return CColorPickerDropdown;
}(_react.Component);

(0, _chunkB2edacfb.h)(CColorPickerDropdown, "displayName", "CColorPickerDropdown");
(0, _chunkB2edacfb.h)(CColorPickerDropdown, "propTypes", {
  alphaValues: _propTypes.default.bool,
  colorState: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  onChange: _propTypes.default.func.isRequired,
  swatches: _propTypes.default.arrayOf(_propTypes.default.oneOfType([rgbTypes, hexType, hslTypes]))
});
(0, _chunkB2edacfb.h)(CColorPickerDropdown, "defaultProps", {
  colorState: {},
  onChange: null,
  swatches: null,
  alphaValues: false
});
var ColorPickerButton = (0, _styledComponents.default)(_CButton.default).withConfig({
  displayName: "CColorPickerDropdown__ColorPickerButton",
  componentId: "sc-1sgmkuu-0"
})(_templateObject());

var ColorPickerContainer = _styledComponents.default.div.withConfig({
  displayName: "CColorPickerDropdown__ColorPickerContainer",
  componentId: "sc-1sgmkuu-1"
})(_templateObject2());

var Circle = _styledComponents.default.div.withConfig({
  displayName: "CColorPickerDropdown__Circle",
  componentId: "sc-1sgmkuu-2"
})(_templateObject3());

var CustomWrapper = _styledComponents.default.div.withConfig({
  displayName: "CColorPickerDropdown__CustomWrapper",
  componentId: "sc-1sgmkuu-3"
})(_templateObject4(), function (props) {
  return props.color;
}, function (props) {
  return props.color;
});

CColorPickerDropdown.displayName = "CColorPickerDropdown";
CColorPickerDropdown.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "handleClickOutside",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "event",
      "type": null
    }],
    "returns": null
  }, {
    "name": "handleClick",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleClose",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleUpdate",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "color",
      "type": null
    }, {
      "name": "e",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "CColorPickerDropdown",
  "props": {
    "colorState": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "union",
        "value": [{
          "name": "object"
        }, {
          "name": "string"
        }]
      },
      "required": false,
      "description": ""
    },
    "onChange": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "swatches": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "union",
          "value": [{
            "name": "custom",
            "raw": "rgbTypes"
          }, {
            "name": "custom",
            "raw": "hexType"
          }, {
            "name": "custom",
            "raw": "hslTypes"
          }]
        }
      },
      "required": false,
      "description": ""
    },
    "alphaValues": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CColorPickerDropdown;
exports.default = _default;