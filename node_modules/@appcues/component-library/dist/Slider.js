"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Input = _interopRequireDefault(require("./Input.js"));

var _chunkE = require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: relative;\n  width: ", "px;\n  height: 16px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  opacity: ", ";\n\n  .slider-track {\n    position: relative;\n    width: ", "px;\n    height: 2px;\n    background: ", ";\n    border-radius: 1px;\n  }\n\n  .slider-track--complete {\n    position: absolute;\n    width: ", "px;\n    transform-origin: center left 0;\n    left: 0;\n    height: 2px;\n    background: #2cb4ff;\n    z-index: 1;\n  }\n\n  .input {\n    /* bg: */\n    background: #e1e7f0;\n    border-radius: 6px;\n    height: 32px;\n    display: flex;\n    min-width: 40px !important;\n    max-width: 100px !imporant;\n    width: auto;\n    margin-left: 16px;\n    font-family: Muli-Regular;\n    font-size: 16px;\n    color: #364760;\n    letter-spacing: 0;\n    text-align: center;\n    line-height: 22px;\n  }\n\n  .value-markers-container {\n    position: absolute;\n    left: 0;\n    top: 2px;\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  border-radius: 12px;\n  left: ", "px;\n  z-index: 2;\n\n  cursor: ", ";\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    left: 4px;\n    top: 4px;\n\n    width: 4px;\n    height: 4px;\n    border-radius: 4px;\n\n    background: ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  width: 16px;\n  height: 16px;\n  border-radius: 16px;\n\n  position: absolute;\n  left: 0;\n  z-index: 3;\n\n  // THESE WILL BE OVERWRITTEN WITH PROPS\n  transform: translateX(0px);\n  transition: transform 0s;\n  background: #2cb4ff;\n  cursor: \"pointer\";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var SLIDER_WIDTH = 200;

var Slider = function (_Component) {
  (0, _chunkB2edacfb.f)(Slider, _Component);

  function Slider(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, Slider);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(Slider).call(this, props));
    _this.state = {
      componentValue: props.value,
      isDragging: false
    };
    _this.onChange = _this.onChange.bind((0, _chunkB2edacfb.m)(_this));
    _this.onChangeInput = _this.onChangeInput.bind((0, _chunkB2edacfb.m)(_this));
    _this.renderDiscreteValueMarkers = _this.renderDiscreteValueMarkers.bind((0, _chunkB2edacfb.m)(_this));
    _this.handleStart = _this.handleStart.bind((0, _chunkB2edacfb.m)(_this));
    _this.handleDrag = _this.handleDrag.bind((0, _chunkB2edacfb.m)(_this));
    _this.handleEnd = _this.handleEnd.bind((0, _chunkB2edacfb.m)(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _chunkB2edacfb.m)(_this));
    _this.setSliderRef = _this.setSliderRef.bind((0, _chunkB2edacfb.m)(_this));
    return _this;
  }

  (0, _chunkB2edacfb.c)(Slider, [{
    key: "setSliderRef",
    value: function setSliderRef(el) {
      this.sliderRef = el;
    }
  }, {
    key: "onChangeInput",
    value: function onChangeInput(e) {
      var inputVal = e.target.value;
      var _this$props = this.props,
          min = _this$props.min,
          max = _this$props.max;
      if (inputVal > max || inputVal < min) return;
      this.onChange(inputVal);
    }
  }, {
    key: "onChange",
    value: function onChange(val) {
      var componentValue = this.state.componentValue;
      var onChange = this.props.onChange;

      if (val !== componentValue) {
        this.setState({
          componentValue: val
        });
      }

      onChange(val);
    }
  }, {
    key: "handleStart",
    value: function handleStart() {
      var disabled = this.props.disabled;
      if (disabled) return;
      this.setState({
        isDragging: true
      });
      document.addEventListener("mousemove", this.handleDrag);
      document.addEventListener("mouseup", this.handleEnd);
    }
  }, {
    key: "handleEnd",
    value: function handleEnd(e) {
      var componentValue = this.state.componentValue;
      var _this$props2 = this.props,
          step = _this$props2.step,
          isDiscrete = _this$props2.isDiscrete;
      this.setState({
        isDragging: false
      });

      if (isDiscrete && step !== undefined) {
        var remainder = componentValue % step;
        var adjustedValue = remainder * 2 > step ? componentValue + (step - remainder) : componentValue - remainder;
        this.onChange(adjustedValue);
      }

      document.removeEventListener("mousemove", this.handleDrag);
      document.removeEventListener("mouseup", this.handleEnd);
    }
  }, {
    key: "handleDrag",
    value: function handleDrag(e) {
      var componentValue = this.state.componentValue;
      var _this$props3 = this.props,
          min = _this$props3.min,
          max = _this$props3.max;
      var body = this.sliderRef.getBoundingClientRect();
      var mousePositionAtThumbCenter = e.clientX - body.left - 8;

      if (mousePositionAtThumbCenter >= 0 && mousePositionAtThumbCenter <= SLIDER_WIDTH) {
        var pctValue = this.toPercentageFromValue(mousePositionAtThumbCenter, SLIDER_WIDTH, 0);

        var _componentValue = (max - min) * pctValue + min;

        this.setState({
          componentValue: _componentValue
        });
      } else if (componentValue >= min || componentValue <= max) {
        var mousePct = this.toPercentageFromValue(mousePositionAtThumbCenter, SLIDER_WIDTH, 0);
        var valuePct = this.toPercentageFromValue(componentValue, max, min);
        this.setState({
          componentValue: mousePct > valuePct ? Math.min(componentValue + (max - min / 100), max) : Math.max(componentValue - (max - min / 100), min)
        });
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      var keyCode = e.keyCode;
      var componentValue = this.state.componentValue;
      var _this$props4 = this.props,
          step = _this$props4.step,
          min = _this$props4.min,
          max = _this$props4.max,
          onChange = _this$props4.onChange;
      var updatedValue;

      if (keyCode !== 9) {
        e.preventDefault();
      }

      switch (keyCode) {
        case 38:
        case 39:
          if (componentValue == max) break;
          updatedValue = Math.min(step ? componentValue + step : componentValue + (max - min) / 100, max);
          this.onChange(updatedValue);
          break;

        case 37:
        case 40:
          if (componentValue == min) break;
          updatedValue = Math.max(step ? componentValue - step : componentValue - (max - min) / 100, min);
          this.onChange(updatedValue);
          break;
      }
    }
  }, {
    key: "toPercentageFromValue",
    value: function toPercentageFromValue(currentVal, max, min) {
      return currentVal / (max - min);
    }
  }, {
    key: "toValueFromPercentage",
    value: function toValueFromPercentage(pct, min, max) {
      return (max - min) * pct + min;
    }
  }, {
    key: "renderDiscreteValueMarkers",
    value: function renderDiscreteValueMarkers() {
      var _this2 = this;

      var _this$props5 = this.props,
          step = _this$props5.step,
          min = _this$props5.min,
          max = _this$props5.max,
          disabled = _this$props5.disabled;
      var componentValue = this.state.componentValue;
      var valueMarkers = [];

      var onChangeFn = function onChangeFn(i) {
        return function () {
          if (disabled) return;

          _this2.onChange(i);
        };
      };

      for (var i = min; i <= max; i += step) {
        var pctValue = this.toPercentageFromValue(i - min, max, min);
        valueMarkers.push(_react.default.createElement(ValueMarker, {
          key: "value-marker-".concat(i),
          translateX: pctValue,
          disabled: disabled,
          className: "value-marker",
          onClick: onChangeFn(i),
          isHighlighted: componentValue >= i
        }));
      }

      return _react.default.createElement("div", {
        className: "value-markers-container"
      }, [valueMarkers]);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          className = _this$props6.className,
          isDiscrete = _this$props6.isDiscrete,
          min = _this$props6.min,
          max = _this$props6.max,
          step = _this$props6.step,
          showInputField = _this$props6.showInputField,
          disabled = _this$props6.disabled,
          label = _this$props6.label;
      var _this$state = this.state,
          componentValue = _this$state.componentValue,
          isDragging = _this$state.isDragging;
      var pctComplete = this.toPercentageFromValue(componentValue - min, max, min);
      return _react.default.createElement(StyledSlider, {
        innerRef: this.setSliderRef,
        className: "switch ".concat(className),
        pctComplete: pctComplete,
        disabled: disabled,
        isDragging: isDragging
      }, _react.default.createElement("div", {
        className: "slider-track"
      }), _react.default.createElement("div", {
        className: "slider-track--complete",
        style: {
          transform: "scaleX(".concat(pctComplete, ")"),
          transition: "transform ".concat(isDragging ? 0 : 0.3, "s")
        }
      }), _react.default.createElement(Thumb, {
        onMouseDown: this.handleStart,
        onTouchMoveCapture: this.handleDrag,
        onTouchEnd: this.handleEnd,
        onKeyDown: this.handleKeyDown,
        disabled: disabled,
        isDragging: isDragging,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": componentValue,
        "aria-label": "".concat(label, " slider"),
        tabIndex: 0,
        style: {
          transform: "translateX(".concat(pctComplete * SLIDER_WIDTH - 8, "px)"),
          backgroundColor: componentValue == max ? "#0D7EF9" : "#2cb4ff",
          cursor: disabled ? "not-allowed" : "pointer",
          transition: "transform ".concat(isDragging ? 0 : 0.3, "s")
        }
      }), showInputField && _react.default.createElement(_Input.default, {
        className: "input",
        value: componentValue,
        type: "number",
        step: step,
        min: min,
        max: max,
        onChange: this.onChangeInput,
        "aria-label": "".concat(label, " input field"),
        tabIndex: 0
      }), isDiscrete && this.renderDiscreteValueMarkers());
    }
  }]);
  return Slider;
}(_react.Component);

Slider.propTypes = {
  className: _propTypes.default.string,
  min: _propTypes.default.number.isRequired,
  max: _propTypes.default.number.isRequired,
  onChange: _propTypes.default.func.isRequired,
  label: _propTypes.default.string,
  step: _propTypes.default.number
};
Slider.defaultProps = {
  options: [],
  selected: null,
  onSelect: function onSelect() {}
};

var Thumb = _styledComponents.default.div.withConfig({
  displayName: "Slider__Thumb",
  componentId: "sc-1vmqhbg-0"
})(_templateObject());

var ValueMarker = _styledComponents.default.div.withConfig({
  displayName: "Slider__ValueMarker",
  componentId: "sc-1vmqhbg-1"
})(_templateObject2(), function (_ref) {
  var translateX = _ref.translateX;
  return translateX * SLIDER_WIDTH - 6;
}, function (_ref2) {
  var disabled = _ref2.disabled;
  return disabled ? "not-allowed" : "pointer";
}, function (_ref3) {
  var isHighlighted = _ref3.isHighlighted;
  return (0, _chunkE.a)(isHighlighted ? 0 : 0.5, "#2cb4ff");
});

var StyledSlider = _styledComponents.default.div.attrs({
  disabled: function disabled(_ref4) {
    var _disabled = _ref4.disabled;
    return _disabled ? 0.5 : 1;
  }
}).withConfig({
  displayName: "Slider__StyledSlider",
  componentId: "sc-1vmqhbg-2"
})(_templateObject3(), SLIDER_WIDTH, function (_ref5) {
  var disabled = _ref5.disabled;
  return disabled;
}, SLIDER_WIDTH, (0, _chunkE.a)(0.5, "#2cb4ff"), SLIDER_WIDTH);

Slider.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "setSliderRef",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "el",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onChangeInput",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "val",
      "type": null
    }],
    "returns": null
  }, {
    "name": "handleStart",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleEnd",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "handleDrag",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "handleKeyDown",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }, {
    "name": "toPercentageFromValue",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "currentVal",
      "type": null
    }, {
      "name": "max",
      "type": null
    }, {
      "name": "min",
      "type": null
    }],
    "returns": null
  }, {
    "name": "toValueFromPercentage",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "pct",
      "type": null
    }, {
      "name": "min",
      "type": null
    }, {
      "name": "max",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderDiscreteValueMarkers",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "Slider",
  "props": {
    "options": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "required": false
    },
    "selected": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "required": false
    },
    "onSelect": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "required": false
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "min": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "max": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    },
    "label": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "step": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = Slider;
exports.default = _default;