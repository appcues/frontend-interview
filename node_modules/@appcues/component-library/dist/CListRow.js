"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _layout = require("./layout.js");

var _type = require("./type.js");

var _CFontIcon = _interopRequireDefault(require("./CFontIcon.js"));

var _CMenu = _interopRequireDefault(require("./CMenu.js"));

var _chunkE8575d = require("./chunk-e8575d19.js");

var _chunk3b2cded = require("./chunk-3b2cded6.js");

var _classnames = _interopRequireDefault(require("classnames"));

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  text-decoration: none;\n  flex: 1 1 auto;\n  padding: 10px;\n  background-color: white;\n  font-size: 14px;\n  color: black;\n  cursor: initial;\n  min-width: 0;\n  justify-content: space-between;\n  &.hasMenu {\n    .cmenu {\n      display: none;\n    }\n  }\n  &.hasMenu.isMenuOpen {\n    background-color: ", ";\n    .cmenu {\n      display: block;\n    }\n  }\n  &.isInteractive {\n    &:active {\n      color: ", ";\n      > div > .list-row-icon-after,\n      > div > .list-row-icon-before {\n        font-size: 14px;\n        color: ", ";\n      }\n    }\n    &:focus,\n    &:hover {\n      cursor: pointer;\n      background-color: ", ";\n    }\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  margin-left: 20px;\n  padding-left: 10px;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  list-style: none;\n  min-width: 160px;\n  max-width: 400px;\n  position: relative;\n  flex-direction: column;\n  &:focus-within,\n  &:focus {\n    background-color: ", ";\n  }\n  .expandable-content {\n    display: none;\n    &.isExpanded {\n      display: block;\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var CListRow = function CListRow(props) {
  var listRowId = (0, _chunk3b2cded.a)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _chunkB2edacfb.l)(_useState, 2),
      menuOpen = _useState2[0],
      setMenuOpen = _useState2[1];

  (0, _chunkE8575d.a)(listRowId, function () {
    return setMenuOpen(false);
  });

  var getIcon = function getIcon() {
    if (!props.expandableElement && props.afterIcon) {
      return props.afterIcon;
    } else if (props.expandableElement && !props.isExpanded) {
      return "fas fa-chevron-down";
    } else if (props.expandableElement && props.isExpanded) {
      return "fas fa-chevron-up";
    }
  };

  var handleKeyDown = function handleKeyDown(event) {
    event.stopPropagation();

    if (event.keyCode === 13 && props.onClick) {
      props.onClick();
    } else if (event.keyCode === 13 && (props.is === "a" || props.to)) {
      window.location.href = props.href || props.to;
    }
  };

  var handleClick = function handleClick() {
    if (props.onClick) {
      return props.onClick();
    } else if (props.hasMenu) {
      setMenuOpen(function (prev) {
        return !prev;
      });
    }
  };

  return _react.default.createElement(Wrapper, {
    role: "menuitem",
    onKeyDown: handleKeyDown,
    "aria-haspopup": props.hasMenu ? "true" : "false",
    className: "list-row-wrapper"
  }, _react.default.createElement(ListRow, (0, _chunkB2edacfb.g)({
    id: listRowId,
    is: props.is,
    onClick: handleClick
  }, props, {
    tabIndex: "1",
    className: (0, _classnames.default)({
      isInteractive: props.onClick || props.hasMenu || props.href || props.to,
      hasMenu: props.hasMenu,
      isMenuOpen: menuOpen
    }, "list-row-item")
  }), props.beforeElement && _react.default.createElement(_layout.Flex, {
    marginRight: 10,
    marginLeft: 15,
    alignSelf: "center"
  }, props.beforeIcon && !props.beforeElement && _react.default.createElement(_CFontIcon.default, {
    className: "list-row-icon-before ".concat(props.beforeIcon)
  }), props.beforeElement), _react.default.createElement(_layout.Flex, {
    id: listRowId,
    flexDirection: "column",
    overflowY: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, props.children, _react.default.createElement(_type.Caption, {
    truncate: true
  }, props.caption)), _react.default.createElement(_layout.Flex, {
    flexDirection: "row",
    justifyContent: "flex-end",
    alignSelf: "center",
    marginLeft: 10
  }, (props.expandableElement || props.afterIcon) && _react.default.createElement(_CFontIcon.default, {
    className: "list-row-icon-after ".concat(getIcon())
  }), props.afterElement)), props.expandableElement && _react.default.createElement(CListRow.ExpandableContent, {
    tabIndex: "1",
    className: (0, _classnames.default)({
      isExpanded: props.isExpanded
    }, "expandable-content")
  }, props.expandableElement));
};

CListRow.displayName = "CListRow";
CListRow.propTypes = (0, _chunkB2edacfb.i)({}, _layout.Box.propTypes, {
  beforeElement: _propTypes.default.node,
  afterElement: _propTypes.default.node,
  beforeIcon: _propTypes.default.string,
  afterIcon: _propTypes.default.string,
  isExpanded: _propTypes.default.bool,
  expandableElement: _propTypes.default.node,
  is: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  hasMenu: _propTypes.default.bool
});
CListRow.defaultProps = (0, _chunkB2edacfb.i)({}, _layout.Box.defaultProps, {
  beforeElement: null,
  afterElement: null,
  beforeIcon: null,
  afterIcon: null,
  isExpanded: false,
  expandableElement: null,
  is: "div",
  hasMenu: null
});

var ExpandableContent = function ExpandableContent(props) {
  return _react.default.createElement(ExpandableContainer, {
    className: props.className
  }, props.children);
};

var Container = function Container(props) {
  return _react.default.createElement(_layout.Box, props, props.children);
};

CListRow.Container = Container;
CListRow.Container.displayName = "CListRow.Container";
CListRow.ExpandableContent = ExpandableContent;
CListRow.ExpandableContent.displayName = "CListRow.ExpandableContent";

CListRow.Menu = function (props) {
  return _react.default.createElement(_CMenu.default, {
    className: "listrow-menu"
  }, props.children);
};

CListRow.Menu.displayName = "CListRow.Menu";

CListRow.Separator = function () {
  return _react.default.createElement(_CMenu.default.Separator, null);
};

CListRow.Separator.displayName = "CListRow.Separator";

var Wrapper = _styledComponents.default.figure.withConfig({
  displayName: "CListRow__Wrapper",
  componentId: "sc-11brla6-0"
})(_templateObject(), function (props) {
  return props.theme["$gray-2"];
});

var ExpandableContainer = _styledComponents.default.div.withConfig({
  displayName: "CListRow__ExpandableContainer",
  componentId: "sc-11brla6-1"
})(_templateObject2());

var ListRow = (0, _styledComponents.default)(_layout.Box).withConfig({
  displayName: "CListRow__ListRow",
  componentId: "sc-11brla6-2"
})(_templateObject3(), function (props) {
  return props.theme["$gray-2"];
}, function (props) {
  return props.theme["$blue-dark"];
}, function (props) {
  return props.theme["$blue-dark"];
}, function (props) {
  return props.theme["$gray-2"];
});
CListRow.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CListRow",
  "props": {
    "beforeElement": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "afterElement": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "beforeIcon": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "afterIcon": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "isExpanded": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "expandableElement": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "is": {
      "defaultValue": {
        "value": "\"div\"",
        "computed": false
      },
      "type": {
        "name": "union",
        "value": [{
          "name": "func"
        }, {
          "name": "string"
        }]
      },
      "required": false,
      "description": ""
    },
    "hasMenu": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    }
  },
  "composes": ["../../layout/layout"]
};
var _default = CListRow;
exports.default = _default;
CListRow.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CListRow",
  "composes": ["./chunk-b2edacfb.js"]
};