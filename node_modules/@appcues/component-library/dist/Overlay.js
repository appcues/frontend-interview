"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _chunk5ef88ed = require("./chunk-5ef88ed1.js");

var _classnames = _interopRequireDefault(require("classnames"));

var _chunkE = require("./chunk-e8276423.js");

var _Portal = _interopRequireDefault(require("./Portal.js"));

require("./chunk-76875e58.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: fixed;\n  overflow: auto;\n\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 100;\n\n  ", " {\n    &.overlay-appear-active,\n    &.overlay-enter-done {\n      opacity: 1;\n    }\n  }\n\n  .overlay-content {\n    position: absolute;\n    z-index: 100;\n    transform: scale(0.5);\n    transition: all 0.2s ease;\n    opacity: 0;\n\n    &.overlay-appear-active,\n    &.overlay-enter-done {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  &.isContextual {\n    position: absolute;\n\n    & ", " {\n      position: absolute;\n      opacity: 1;\n    }\n\n    .overlay-content {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  transition: all 0.2s ease;\n  z-index: 100;\n  background-color: ", ";\n  overflow: auto;\n\n  opacity: 0;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var Overlay = function (_Component) {
  (0, _chunkB2edacfb.f)(Overlay, _Component);

  function Overlay() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, Overlay);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(Overlay)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "state", {
      isOpen: true,
      callback: null
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "onCloseOverlay", function (callback) {
      return function () {
        var isContextual = _this.props.isContextual;

        if (isContextual) {
          callback && callback();
        } else {
          _this.setState({
            isOpen: false,
            callback: callback
          });
        }
      };
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "onCloseCompleteOverlay", function () {
      var callback = _this.state.callback;
      callback && callback();
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(Overlay, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          isContextual = _this$props.isContextual,
          shouldCloseOnClickBackdrop = _this$props.shouldCloseOnClickBackdrop;
      var isOpen = this.state.isOpen;
      var closeWithCallback = this.onCloseOverlay;
      var renderedChildren = children(closeWithCallback);

      var overlayContent = _react.default.cloneElement(renderedChildren, {
        className: (0, _classnames.default)(renderedChildren.props.className, "overlay-content", isContextual && "isContextual"),
        tabIndex: 0
      });

      var transitionChildren = isOpen ? [_react.default.createElement(_chunk5ef88ed.a, {
        key: "overlay-backdrop",
        classNames: "overlay",
        timeout: {
          enter: 10,
          exit: 210
        },
        onExited: this.onCloseCompleteOverlay
      }, _react.default.createElement(OverlayBackdrop, {
        className: (0, _classnames.default)(isContextual && "isContextual"),
        onClick: shouldCloseOnClickBackdrop ? this.onCloseOverlay(null) : undefined
      })), _react.default.createElement(_chunk5ef88ed.a, {
        key: "overlay-content",
        classNames: "overlay",
        timeout: {
          enter: 10,
          exit: 210
        }
      }, overlayContent)] : [];
      var Container = isContextual ? _react.Fragment : _Portal.default;
      return _react.default.createElement(Container, null, _react.default.createElement(_chunk5ef88ed.b, {
        appear: true,
        mountOnEnter: true,
        unmountOnExit: true,
        className: (0, _classnames.default)(isContextual && "isContextual"),
        component: OverlayScrollContainer
      }, transitionChildren));
    }
  }]);
  return Overlay;
}(_react.Component);

(0, _chunkB2edacfb.h)(Overlay, "propTypes", {
  shouldCloseOnClickBackdrop: _propTypes.default.bool
});
(0, _chunkB2edacfb.h)(Overlay, "defaultProps", {
  shouldCloseOnClickBackdrop: false
});

var OverlayBackdrop = _styledComponents.default.div.withConfig({
  displayName: "Overlay__OverlayBackdrop",
  componentId: "sc-1v9s6dm-0"
})(_templateObject(), function (props) {
  return (0, _chunkE.a)(0.6, props.theme["$gray-8"]);
});

var OverlayScrollContainer = _styledComponents.default.div.withConfig({
  displayName: "Overlay__OverlayScrollContainer",
  componentId: "sc-1v9s6dm-1"
})(_templateObject2(), OverlayBackdrop, OverlayBackdrop);

Overlay.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "onCloseOverlay",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "callback",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onCloseCompleteOverlay",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "Overlay",
  "props": {
    "shouldCloseOnClickBackdrop": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = Overlay;
exports.default = _default;