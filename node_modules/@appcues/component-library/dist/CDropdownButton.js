"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _CButton = _interopRequireDefault(require("./CButton.js"));

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: relative;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  &:focus {\n    z-index: 1;\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  background-color: white;\n  position: absolute;\n  padding: 16px 0;\n  top: calc(100% + 3px);\n  margin-top: 0px;\n  list-style: none;\n  border-radius: 4px;\n  max-height: 300px;\n  overflow-y: auto;\n  box-shadow: ", ";\n  z-index: 3;\n  width: ", ";\n  padding: 0;\n  cursor: default;\n  &.menu--dropup {\n    bottom: calc(100% - 2px);\n    top: auto;\n  }\n\n  .option-detail-container {\n    display: block;\n    box-sizing: border-box;\n    padding: 9px 16px;\n    cursor: default;\n  }\n\n  & li {\n    display: block;\n    position: relative;\n    padding: 7px 24px 6px;\n    line-height: 26px;\n    font-size: ", ";\n    white-space: nowrap;\n    cursor: pointer;\n    text-decoration: none;\n    &:hover,\n    &:focus,\n    &:active {\n      background-color: ", ";\n    }\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  border: none;\n  height: auto;\n  padding: 8px;\n  display: flex;\n  min-width: 50px;\n  justify-content: center;\n  flex-direction: row;\n  border: 1px solid transparent;\n  &.iconButton > i {\n    margin: 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var CDropdownButton = function (_Component) {
  (0, _chunkB2edacfb.f)(CDropdownButton, _Component);

  function CDropdownButton() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, CDropdownButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(CDropdownButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "state", {
      isMenuOpen: false
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "handleClickOutside", function (event) {
      var domNode = _reactDom.default.findDOMNode((0, _chunkB2edacfb.m)(_this));

      if ((!domNode || !domNode.contains(event.target)) && _this.state.isMenuOpen) {
        _this.collapse();
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "toggle", function (e) {
      e.stopPropagation();

      _this.setState({
        isMenuOpen: !_this.state.isMenuOpen
      });
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(CDropdownButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener("click", this.handleClickOutside, true);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener("click", this.handleClickOutside, true);
    }
  }, {
    key: "collapse",
    value: function collapse() {
      this.setState({
        isMenuOpen: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          shouldDropUp = _this$props.shouldDropUp,
          options = _this$props.options,
          iconButton = _this$props.iconButton;
      var isMenuOpen = this.state.isMenuOpen;
      var dropUpClass = shouldDropUp ? "menu--dropup" : "";
      return _react.default.createElement(DropdownContainer, {
        className: (0, _classnames.default)(className, "dropdown-button")
      }, _react.default.createElement(CoreButton, (0, _chunkB2edacfb.g)({
        className: (0, _classnames.default)(className, {
          iconButton: iconButton
        }),
        onClick: this.toggle,
        tabIndex: "0"
      }, this.props), this.props.children), isMenuOpen && _react.default.createElement(Menu, {
        className: (0, _classnames.default)("menu", dropUpClass),
        onClick: function onClick(e) {
          e.stopPropagation();
        }
      }, options.map(function (option, i) {
        return _react.default.createElement("li", {
          key: i,
          tabIndex: 0,
          onClick: _this2.collapse.bind(_this2)
        }, option);
      })));
    }
  }]);
  return CDropdownButton;
}(_react.Component);

CDropdownButton.propTypes = {
  shouldDropUp: _propTypes.default.bool,
  className: _propTypes.default.string,
  options: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired
};
CDropdownButton.defaultProps = {
  shouldDropUp: false
};
var CoreButton = (0, _styledComponents.default)(_CButton.default).withConfig({
  displayName: "CDropdownButton__CoreButton",
  componentId: "bj8vcj-0"
})(_templateObject());

var Menu = _styledComponents.default.ul.withConfig({
  displayName: "CDropdownButton__Menu",
  componentId: "bj8vcj-1"
})(_templateObject2(), function (props) {
  return props.theme["$box-shadow-3"];
}, function (props) {
  return props.menuWidth ? props.menuWidth + "px" : "256px";
}, function (props) {
  return props.theme["$font-size-base"];
}, function (props) {
  return props.theme["$gray-2"];
});

var DropdownContainer = _styledComponents.default.div.withConfig({
  displayName: "CDropdownButton__DropdownContainer",
  componentId: "bj8vcj-2"
})(_templateObject3());

CDropdownButton.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "handleClickOutside",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "event",
      "type": null
    }],
    "returns": null
  }, {
    "name": "collapse",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "toggle",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "CDropdownButton",
  "props": {
    "shouldDropUp": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "options": {
      "type": {
        "name": "union",
        "value": [{
          "name": "arrayOf",
          "value": {
            "name": "node"
          }
        }, {
          "name": "node"
        }]
      },
      "required": true,
      "description": ""
    },
    "children": {
      "type": {
        "name": "union",
        "value": [{
          "name": "arrayOf",
          "value": {
            "name": "node"
          }
        }, {
          "name": "node"
        }]
      },
      "required": true,
      "description": ""
    }
  }
};
var _default = CDropdownButton;
exports.default = _default;