"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Overlay = _interopRequireDefault(require("./Overlay.js"));

var _CButton = _interopRequireDefault(require("./CButton.js"));

var _layout = require("./layout.js");

var _type = require("./type.js");

require("react-dom");

require("./chunk-5ef88ed1.js");

require("./chunk-76875e58.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-e8276423.js");

require("./Portal.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-cfb1dc74.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject6() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  flex-direction: column;\n\n  padding: 16px 24px;\n  border-radius: 6px;\n  background-color: white;\n  box-shadow: ", ";\n\n  pointer-events: all;\n\n  min-height: 160px;\n  max-height: 80vh;\n\n  width: 440px;\n\n  &.small {\n    width: 360px;\n  }\n  &.large {\n    width: 520px;\n  }\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = (0, _chunkB2edacfb.a)(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _chunkB2edacfb.a)(["\n  margin: 0;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n    flex-shrink: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n\n    margin-top: auto;\n    padding-top: 16px;\n\n    &.spaced-apart {\n      justify-content: space-between;\n    }\n\n    & > *:not(:first-child) {\n      margin-left: 16px;\n    }\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n    margin: 10px -24px 0;\n    padding: 0 24px;\n    overflow-y: scroll;\n    color: ", ";\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n    flex-shrink: 0;\n    display: flex;\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var TYPES = {
  PRIMARY: "primary",
  POSITIVE: "positive",
  NEGATIVE: "negative"
};
var SIZE_TYPES = {
  LARGE: "large",
  MEDIUM: "medium",
  SMALL: "small"
};

var DialogType = _propTypes.default.oneOf(Object.values(TYPES));

var SizeType = _propTypes.default.oneOf(Object.values(SIZE_TYPES));

var CDialog = function (_PureComponent) {
  (0, _chunkB2edacfb.f)(CDialog, _PureComponent);

  function CDialog() {
    (0, _chunkB2edacfb.b)(this, CDialog);
    return (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(CDialog).apply(this, arguments));
  }

  (0, _chunkB2edacfb.c)(CDialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          title = _this$props.title,
          onPrimaryAction = _this$props.onPrimaryAction,
          onSecondaryAction = _this$props.onSecondaryAction,
          primaryActionText = _this$props.primaryActionText,
          secondaryActionText = _this$props.secondaryActionText,
          size = _this$props.size,
          children = _this$props.children,
          isContextual = _this$props.isContextual,
          components = _this$props.components,
          className = _this$props.className,
          dialogProps = (0, _chunkB2edacfb.j)(_this$props, ["type", "title", "onPrimaryAction", "onSecondaryAction", "primaryActionText", "secondaryActionText", "size", "children", "isContextual", "components", "className"]);
      var DialogHeader = components.Header || components.Header === false ? components.Header : Header;
      var DialogContent = components.Content || components.Content === false ? components.Content : Content;
      var DialogFooter = components.Footer || components.Footer === false ? components.Footer : Footer;
      return _react.default.createElement(_Overlay.default, {
        isContextual: isContextual
      }, function (closeWithCallback) {
        return _react.default.createElement(DialogContainer, null, _react.default.createElement(StyledDialog, (0, _chunkB2edacfb.g)({
          className: (0, _classnames.default)(size, className)
        }, dialogProps), DialogHeader && _react.default.createElement(DialogHeader, {
          title: title
        }), DialogContent && _react.default.createElement(DialogContent, null, children), DialogFooter && _react.default.createElement(DialogFooter, {
          type: type,
          onPrimaryAction: onPrimaryAction,
          onSecondaryAction: onSecondaryAction,
          primaryActionText: primaryActionText,
          secondaryActionText: secondaryActionText,
          closeWithCallback: closeWithCallback
        })));
      });
    }
  }]);
  return CDialog;
}(_react.PureComponent);

(0, _chunkB2edacfb.h)(CDialog, "displayName", "CDialog");
(0, _chunkB2edacfb.h)(CDialog, "propTypes", {
  title: _propTypes.default.string.isRequired,
  onPrimaryAction: _propTypes.default.func,
  onSecondaryAction: _propTypes.default.func,
  type: DialogType,
  children: _propTypes.default.node,
  size: SizeType,
  isContextual: _propTypes.default.bool,
  secondaryActionText: _propTypes.default.string,
  primaryActionText: _propTypes.default.string,
  components: _propTypes.default.shape({
    Header: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
    Content: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
    Footer: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool])
  })
});
(0, _chunkB2edacfb.h)(CDialog, "defaultProps", {
  type: TYPES.PRIMARY,
  size: SIZE_TYPES.MEDIUM,
  isContextual: false,
  primaryActionText: "Ok, got it",
  secondaryActionText: "Cancel",
  onPrimaryAction: null,
  onSecondaryAction: null,
  components: {}
});
(0, _chunkB2edacfb.h)(CDialog, "enums", {
  DialogType: TYPES,
  SizeType: SIZE_TYPES
});
(0, _chunkB2edacfb.h)(CDialog, "Header", _styledComponents.default.div.withConfig({
  displayName: "CDialog",
  componentId: "vxl6j4-0"
})(_templateObject()));
(0, _chunkB2edacfb.h)(CDialog, "Content", _styledComponents.default.div.withConfig({
  displayName: "CDialog",
  componentId: "vxl6j4-1"
})(_templateObject2(), function (props) {
  return props.theme["$gray-7"];
}));
(0, _chunkB2edacfb.h)(CDialog, "Footer", _styledComponents.default.div.withConfig({
  displayName: "CDialog",
  componentId: "vxl6j4-2"
})(_templateObject3()));

var Header = function Header(_ref) {
  var title = _ref.title;
  return _react.default.createElement(CDialog.Header, null, _react.default.createElement(DialogTitle, null, title));
};

var DialogTitle = (0, _styledComponents.default)(_type.H2).withConfig({
  displayName: "CDialog__DialogTitle",
  componentId: "vxl6j4-3"
})(_templateObject4());

var Content = function Content(_ref2) {
  var children = _ref2.children;
  return _react.default.createElement(CDialog.Content, null, children);
};

var Footer = function Footer(_ref3) {
  var type = _ref3.type,
      onPrimaryAction = _ref3.onPrimaryAction,
      onSecondaryAction = _ref3.onSecondaryAction,
      primaryActionText = _ref3.primaryActionText,
      secondaryActionText = _ref3.secondaryActionText,
      closeWithCallback = _ref3.closeWithCallback;
  return _react.default.createElement(CDialog.Footer, {
    className: (0, _classnames.default)(type === TYPES.NEGATIVE && onSecondaryAction && "spaced-apart")
  }, onSecondaryAction && _react.default.createElement(_CButton.default, {
    onClick: closeWithCallback(onSecondaryAction)
  }, secondaryActionText), _react.default.createElement(_CButton.default, {
    type: type,
    onClick: closeWithCallback(onPrimaryAction)
  }, primaryActionText));
};

var DialogContainer = _styledComponents.default.div.withConfig({
  displayName: "CDialog__DialogContainer",
  componentId: "vxl6j4-4"
})(_templateObject5());

var StyledDialog = (0, _styledComponents.default)(_layout.Box).withConfig({
  displayName: "CDialog__StyledDialog",
  componentId: "vxl6j4-5"
})(_templateObject6(), function (props) {
  return props.theme["$box-shadow-4"];
});
CDialog.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CDialog",
  "props": {
    "type": {
      "defaultValue": {
        "value": "\"primary\"",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "DialogType"
      },
      "required": false,
      "description": ""
    },
    "size": {
      "defaultValue": {
        "value": "\"medium\"",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "SizeType"
      },
      "required": false,
      "description": ""
    },
    "isContextual": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "primaryActionText": {
      "defaultValue": {
        "value": "\"Ok, got it\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "secondaryActionText": {
      "defaultValue": {
        "value": "\"Cancel\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onPrimaryAction": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onSecondaryAction": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "components": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "shape",
        "value": {
          "Header": {
            "name": "union",
            "value": [{
              "name": "func"
            }, {
              "name": "bool"
            }],
            "required": false
          },
          "Content": {
            "name": "union",
            "value": [{
              "name": "func"
            }, {
              "name": "bool"
            }],
            "required": false
          },
          "Footer": {
            "name": "union",
            "value": [{
              "name": "func"
            }, {
              "name": "bool"
            }],
            "required": false
          }
        }
      },
      "required": false,
      "description": ""
    },
    "title": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CDialog;
exports.default = _default;