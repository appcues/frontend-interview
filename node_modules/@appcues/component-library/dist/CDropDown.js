"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CDropDown = exports.BareCDropDown = exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _chunk6104512b = require("./chunk-6104512b.js");

var _chunk5423f15f = require("./chunk-5423f15f.js");

var _CFontIcon = _interopRequireDefault(require("./CFontIcon.js"));

var _MenuList = _interopRequireDefault(require("./MenuList.js"));

var _Option = _interopRequireDefault(require("./Option.js"));

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("react-dom");

require("./chunk-5ef88ed1.js");

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

require("./MultiSelectMenuList.js");

require("./MultiSelectOption.js");

require("./CheckboxIndicator.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  min-width: 160px;\n  max-width: 400px;\n\n  .dropdown__control,\n  [role=\"option\"] {\n    cursor: pointer;\n  }\n\n  &:hover\n    .dropdown__control.dropdown__control--is-focused\n    .dropdown__indicator {\n    color: ", ";\n  }\n\n  .dropdown__control {\n    border: 1px solid ", ";\n    border-radius: 6px;\n    transition: border-color 0.2s ease;\n    max-width: 400px;\n\n    &.dropdown__control--is-focused {\n      border-color: ", ";\n      box-shadow: none;\n    }\n\n    &.dropdown__control--is-disabled {\n      background-color: ", ";\n\n      .dropdown__single-value,\n      .dropdown__value-container--is-multi {\n        color: ", ";\n      }\n    }\n\n    &:hover:not(.dropdown__control--is-disabled) {\n      .dropdown__single-value,\n      .dropdown__value-container--is-multi {\n        color: ", ";\n      }\n\n      .dropdown__indicator {\n        color: ", ";\n      }\n    }\n  }\n\n  .dropdown__placeholder {\n    position: relative;\n    transform: none;\n    white-space: nowrap;\n    color: ", ";\n  }\n\n  .dropdown__value-container {\n    white-space: nowrap;\n    padding: 1px 4px 1px 14px;\n    overflow: visible;\n  }\n\n  .dropdown__displayvalue {\n    display: block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    input {\n      position: absolute;\n    }\n  }\n\n  .dropdown__single-value,\n  .dropdown__value-container--is-multi {\n    color: ", ";\n    transition: color 0.2s ease;\n    max-width: calc(100% - 17px);\n  }\n\n  .dropdown__indicator-separator {\n    display: none;\n  }\n\n  .dropdown__indicator {\n    color: ", ";\n    transition: color 0.2s ease;\n    font-size: 20px;\n    padding: 0 14px 0 8px;\n    height: 36px;\n    align-items: center;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var OptionValueType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number]);

var SingleOptionType = _propTypes.default.shape({
  label: _propTypes.default.string,
  value: OptionValueType
});

var GroupType = _propTypes.default.shape({
  label: _propTypes.default.string,
  options: _propTypes.default.arrayOf(SingleOptionType)
});

var ALIGNMENT_TYPES = {
  LEFT: "left",
  RIGHT: "right"
};

var AlignmentType = _propTypes.default.oneOf(Object.values(ALIGNMENT_TYPES));

var BareCDropDown = function (_Component) {
  (0, _chunkB2edacfb.f)(BareCDropDown, _Component);

  function BareCDropDown(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, BareCDropDown);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(BareCDropDown).call(this, props));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "onChange", function (selection, eventData) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          isMultiSelect = _this$props.isMultiSelect;

      if (!selection) {
        return onChange(selection, selection, eventData);
      }

      if (isMultiSelect) {
        var values = selection.map(function (option) {
          return option.value;
        });
        return onChange(values, selection, eventData);
      }

      return onChange(selection.value, selection, eventData);
    });
    _this.state = {
      appRoot: document.querySelector(props.portalSelector)
    };
    return _this;
  }

  (0, _chunkB2edacfb.c)(BareCDropDown, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          options = _this$props2.options,
          noOptionsMessage = _this$props2.noOptionsMessage,
          value = _this$props2.value,
          onChange = _this$props2.onChange,
          className = _this$props2.className,
          placeholder = _this$props2.placeholder,
          isDisabled = _this$props2.isDisabled,
          isMultiSelect = _this$props2.isMultiSelect,
          minMenuWidth = _this$props2.minMenuWidth,
          alignment = _this$props2.alignment,
          name = _this$props2.name,
          indicatorIconClass = _this$props2.indicatorIconClass,
          components$$1 = _this$props2.components,
          innerRef = _this$props2.innerRef,
          usePortal = _this$props2.usePortal,
          theme = _this$props2.theme,
          boxProps = (0, _chunkB2edacfb.j)(_this$props2, ["options", "noOptionsMessage", "value", "onChange", "className", "placeholder", "isDisabled", "isMultiSelect", "minMenuWidth", "alignment", "name", "indicatorIconClass", "components", "innerRef", "usePortal", "theme"]);
      var appRoot = this.state.appRoot;
      var selectValue = isMultiSelect ? options.filter(function (option) {
        return value && value.includes(option.value);
      }) : options.find(function (option) {
        return option.value === value;
      });
      return _react.default.createElement(StyledDropDown, (0, _chunkB2edacfb.g)({
        is: _chunk5423f15f.b,
        ref: innerRef,
        className: (0, _classnames.default)("cdropdown", className, alignment && "alignment-".concat(alignment)),
        options: options,
        noOptionsMessage: noOptionsMessage,
        name: name,
        onChange: this.onChange,
        value: selectValue,
        placeholder: placeholder,
        isDisabled: isDisabled,
        isMulti: isMultiSelect && !!options.length,
        isSearchable: false,
        isClearable: false,
        styles: {
          groupHeading: function groupHeading(base) {
            return (0, _chunkB2edacfb.i)({}, base, {
              padding: "8px 24px",
              fontSize: "14px",
              fontWeight: "800",
              color: theme["$gray-7"],
              letterSpacing: "0.8px"
            });
          },
          menu: function menu(base) {
            return (0, _chunkB2edacfb.i)({}, base, {
              marginTop: 0,
              right: alignment === ALIGNMENT_TYPES.RIGHT ? 0 : base.right,
              minWidth: minMenuWidth || "170px",
              boxShadow: theme["$box-shadow-3"]
            });
          },
          option: function option(base, state) {
            return (0, _chunkB2edacfb.i)({}, base, {
              cursor: "pointer",
              color: state.isSelected ? theme["$blue"] : state.isFocused ? theme["$gray-8"] : theme["$gray-7"],
              backgroundColor: state.isFocused ? theme["$gray-1"] : "transparent",
              padding: "8px 24px",
              whiteSpace: "nowrap",
              textOverflow: "ellipsis",
              overflow: "hidden"
            });
          },
          menuList: function menuList(base) {
            return (0, _chunkB2edacfb.i)({}, base, {
              paddingTop: "16px",
              paddingBottom: "16px",
              maxHeight: "288px"
            });
          },
          menuPortal: function menuPortal(base) {
            return (0, _chunkB2edacfb.i)({}, base, {
              zIndex: 9999
            });
          }
        },
        menuPortalTarget: usePortal ? appRoot : null,
        blurInputOnSelect: !isMultiSelect,
        closeMenuOnSelect: !isMultiSelect,
        classNamePrefix: "dropdown",
        minMenuWidth: minMenuWidth,
        indicatorIconClass: indicatorIconClass,
        components: (0, _chunkB2edacfb.i)({
          DropdownIndicator: DropdownIndicator,
          ValueContainer: ValueContainer,
          MultiValueContainer: MultiValueContainer,
          MenuList: _MenuList.default,
          Option: _Option.default
        }, components$$1)
      }, boxProps));
    }
  }]);
  return BareCDropDown;
}(_react.Component);

exports.BareCDropDown = BareCDropDown;
(0, _chunkB2edacfb.h)(BareCDropDown, "displayName", "CDropDown");
(0, _chunkB2edacfb.h)(BareCDropDown, "propTypes", {
  options: _propTypes.default.oneOfType([_propTypes.default.arrayOf(GroupType), _propTypes.default.arrayOf(SingleOptionType)]).isRequired,
  noOptionsMessage: _propTypes.default.func,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([OptionValueType, _propTypes.default.arrayOf(OptionValueType)]),
  placeholder: _propTypes.default.string,
  isDisabled: _propTypes.default.bool,
  isMultiSelect: _propTypes.default.bool,
  components: _propTypes.default.object,
  minMenuWidth: _propTypes.default.string,
  alignment: AlignmentType,
  indicatorIconClass: _propTypes.default.string,
  usePortal: _propTypes.default.bool,
  portalSelector: _propTypes.default.string
});
(0, _chunkB2edacfb.h)(BareCDropDown, "defaultProps", {
  placeholder: "Select an option...",
  noOptionsMessage: function noOptionsMessage() {},
  isDisabled: false,
  isMultiSelect: false,
  components: {},
  minMenuWidth: null,
  alignment: ALIGNMENT_TYPES.LEFT,
  indicatorIconClass: "fas fa-caret-down",
  usePortal: false,
  portalSelector: ".apc-react-body"
});
(0, _chunkB2edacfb.h)(BareCDropDown, "enums", {
  AlignmentType: ALIGNMENT_TYPES
});

var DropdownIndicator = function DropdownIndicator(props) {
  return _react.default.createElement(_chunk5423f15f.a.DropdownIndicator, props, _react.default.createElement(_CFontIcon.default, {
    className: props.selectProps.indicatorIconClass
  }));
};

var ValueContainer = function ValueContainer(props) {
  return _react.default.createElement(_chunk5423f15f.a.ValueContainer, props, _react.default.createElement("div", {
    className: "dropdown__displayvalue"
  }, props.children));
};

var MultiValueContainer = function MultiValueContainer(_ref) {
  var data = _ref.data,
      selectProps = _ref.selectProps;

  if (selectProps.value[0].value !== data.value) {
    return false;
  }

  var label = data.label;

  if (selectProps.value.length > 1) {
    label = label + " +".concat(selectProps.value.length - 1);
  }

  return label;
};

var StyledDropDown = (0, _styledComponents.default)(_chunk6104512b.a).withConfig({
  displayName: "CDropDown__StyledDropDown",
  componentId: "sc-1kn6vrj-0"
})(_templateObject(), function (props) {
  return props.theme["$gray-6"];
}, function (props) {
  return props.theme["$gray-3"];
}, function (props) {
  return props.theme["$blue"];
}, function (props) {
  return props.theme["$gray-1"];
}, function (props) {
  return props.theme["$gray-5"];
}, function (props) {
  return props.theme["$gray-8"];
}, function (props) {
  return props.theme["$gray-6"];
}, function (props) {
  return props.theme["$gray-5"];
}, function (props) {
  return props.theme["$gray-7"];
}, function (props) {
  return props.theme["$gray-5"];
});

var withRef = function withRef(Component$$1) {
  return _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(Component$$1, (0, _chunkB2edacfb.g)({
      ref: ref
    }, props));
  });
};

var CDropDown = withRef((0, _styledComponents.withTheme)(BareCDropDown));
exports.CDropDown = CDropDown;
CDropDown.displayName = BareCDropDown.displayName;
BareCDropDown.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "onChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "selection",
      "type": null
    }, {
      "name": "eventData",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "CDropDown",
  "props": {
    "placeholder": {
      "defaultValue": {
        "value": "\"Select an option...\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "noOptionsMessage": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "isDisabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isMultiSelect": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "components": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": ""
    },
    "minMenuWidth": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "alignment": {
      "defaultValue": {
        "value": "\"left\"",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "AlignmentType"
      },
      "required": false,
      "description": ""
    },
    "indicatorIconClass": {
      "defaultValue": {
        "value": "\"fas fa-caret-down\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "usePortal": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "portalSelector": {
      "defaultValue": {
        "value": "\".apc-react-body\"",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "options": {
      "type": {
        "name": "union",
        "value": [{
          "name": "arrayOf",
          "value": {
            "name": "custom",
            "raw": "GroupType"
          }
        }, {
          "name": "arrayOf",
          "value": {
            "name": "custom",
            "raw": "SingleOptionType"
          }
        }]
      },
      "required": true,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    },
    "value": {
      "type": {
        "name": "union",
        "value": [{
          "name": "custom",
          "raw": "OptionValueType"
        }, {
          "name": "arrayOf",
          "value": {
            "name": "custom",
            "raw": "OptionValueType"
          }
        }]
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CDropDown;
exports.default = _default;