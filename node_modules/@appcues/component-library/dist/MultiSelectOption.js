"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _chunk5423f15f = require("./chunk-5423f15f.js");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CheckboxIndicator = _interopRequireDefault(require("./CheckboxIndicator.js"));

require("./chunk-76875e58.js");

require("./chunk-f2932d1d.js");

require("prop-types");

require("./chunk-8219403d.js");

require("./chunk-eb19ede6.js");

require("react-dom");

require("./chunk-5ef88ed1.js");

require("./CFontIcon.js");

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-cb015231.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  .dropdown__option {\n    display: flex;\n    align-items: center;\n\n    cursor: pointer;\n\n    &:active {\n      background-color: transparent;\n    }\n  }\n\n  .checkbox {\n    margin-right: 0;\n  }\n\n  &:hover {\n    .checkbox {\n      box-shadow: inset 0 0 0 ", "\n        ", ";\n    }\n    ", " {\n      color: ", ";\n    }\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  transition: color 0.2s ease;\n  margin-left: 12px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var MultiSelectOption = function (_Component) {
  (0, _chunkB2edacfb.f)(MultiSelectOption, _Component);

  function MultiSelectOption(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, MultiSelectOption);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(MultiSelectOption).call(this, props));
    _this.onClick = _this.onClick.bind((0, _chunkB2edacfb.m)(_this));
    _this.onMouseEnter = _this.onMouseEnter.bind((0, _chunkB2edacfb.m)(_this));
    _this.onMouseLeave = _this.onMouseLeave.bind((0, _chunkB2edacfb.m)(_this));
    _this.state = {
      isHovering: false
    };
    return _this;
  }

  (0, _chunkB2edacfb.c)(MultiSelectOption, [{
    key: "onMouseEnter",
    value: function onMouseEnter() {
      this.setState({
        isHovering: true
      });
    }
  }, {
    key: "onMouseLeave",
    value: function onMouseLeave() {
      this.setState({
        isHovering: false
      });
    }
  }, {
    key: "onClick",
    value: function onClick() {
      var _this$props = this.props,
          option = _this$props.option,
          selectOption = _this$props.selectOption;
      selectOption(option);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          option = _this$props2.option,
          optionProps = (0, _chunkB2edacfb.j)(_this$props2, ["option"]);
      var isHovering = this.state.isHovering;
      var selectProps = optionProps.selectProps,
          selectOption = optionProps.selectOption;
      var isSelected = selectProps.value.map(function (data) {
        return data.value;
      }).includes(option.value);
      var label = selectProps.getOptionLabel(option);
      var InnerOption = selectProps.components && selectProps.components.InnerOption;
      var renderInnerOption = InnerOption ? _react.default.createElement(InnerOption, {
        isHovering: isHovering,
        isSelected: isSelected
      }, selectProps.getOptionLabel(option)) : label;
      return _react.default.createElement(StyledMultiSelectOption, {
        onClick: this.onClick,
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        isSelected: isSelected
      }, _react.default.createElement(_chunk5423f15f.a.Option, (0, _chunkB2edacfb.g)({
        label: option.label,
        data: option
      }, optionProps), _react.default.createElement(_CheckboxIndicator.default, {
        isChecked: isSelected
      }), _react.default.createElement(OptionLabel, null, renderInnerOption)));
    }
  }]);
  return MultiSelectOption;
}(_react.Component);

var OptionLabel = _styledComponents.default.span.withConfig({
  displayName: "MultiSelectOption__OptionLabel",
  componentId: "sc-1k22ld3-0"
})(_templateObject());

var StyledMultiSelectOption = _styledComponents.default.div.withConfig({
  displayName: "MultiSelectOption__StyledMultiSelectOption",
  componentId: "sc-1k22ld3-1"
})(_templateObject2(), function (props) {
  return props.isSelected ? "8px" : "2px";
}, function (props) {
  return props.theme["$blue-dark"];
}, OptionLabel, function (props) {
  return props.theme["$blue-dark"];
});

MultiSelectOption.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "onMouseEnter",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "onMouseLeave",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "onClick",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "MultiSelectOption"
};
var _default = MultiSelectOption;
exports.default = _default;