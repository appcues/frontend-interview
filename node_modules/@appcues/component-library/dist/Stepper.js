"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("./Button.js"));

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  align-items: center;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  position: relative;\n\n  height: 4px;\n  width: 32px;\n\n  background: ", ";\n  border-top: 1px solid ", ";\n  border-bottom: 1px solid ", ";\n\n  &.has-reached {\n    &::before {\n      transform: scaleX(1);\n      transition: transform 0.2s ease-out 0s;\n      border-color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  &::before {\n    content: \"\";\n    position: absolute;\n\n    height: calc(100% + 2px);\n    width: calc(100% + 2px);\n    top: -1px;\n    left: -1px;\n\n    background: ", ";\n    border-color: ", ";\n\n    transform: scaleX(0);\n    transform-origin: left center 0;\n    transition: transform 0.2s ease-out 0.1s;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  height: 32px;\n  border-radius: 20px;\n  box-sizing: border-box;\n  padding: 2px 20px;\n\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n\n  font-size: 14px;\n  cursor: pointer;\n\n  background: #ffffff;\n\n  border: 1px solid #e7ecf3;\n  color: #5c5cff;\n  transition: background 0.2s ease-out 0.1s, color 0.2s ease-out -0.1s;\n\n  &.has-reached {\n    background: ", ";\n    border-color: ", ";\n    transition: background 0.2s ease-out;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var createStepMemo = function createStepMemo(steps, onSelect) {
  var memo = {};
  steps.forEach(function (step) {
    memo[step.key] = function () {
      return onSelect(step.key);
    };
  });
  return memo;
};

var Stepper = function (_Component) {
  (0, _chunkB2edacfb.f)(Stepper, _Component);

  function Stepper(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, Stepper);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(Stepper).call(this, props));
    _this.state = {
      selectedStepIndex: props.steps.findIndex(function (step) {
        return step.key == props.selected;
      }) || 0
    };
    var onSelect = props.onSelect,
        steps = props.steps;
    _this.stepMemo = createStepMemo(steps, onSelect);
    return _this;
  }

  (0, _chunkB2edacfb.c)(Stepper, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var onSelect = nextProps.onSelect,
          steps = nextProps.steps,
          selected = nextProps.selected;

      if (this.props.steps !== steps) {
        this.stepMemo = createStepMemo(steps, onSelect);
      }

      if (selected !== this.props.selected) {
        this.setState({
          selectedStepIndex: steps.findIndex(function (step) {
            return step.key == selected;
          })
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          steps = _this$props.steps,
          selected = _this$props.selected,
          className = _this$props.className;
      var selectedStepIndex = this.state.selectedStepIndex;
      var stepMemo = this.stepMemo;
      return _react.default.createElement(StyledStepper, {
        className: (0, _classnames.default)(className, "navigation-stepper")
      }, steps.map(function (_ref, index) {
        var key = _ref.key,
            value = _ref.value;
        var hasReached = index <= selectedStepIndex;
        var classes = {
          step: true,
          "is-first": index == 0,
          "has-reached": hasReached
        };

        if (key === selected) {
          classes["step--current"] = true;
        }

        return [index !== 0 && _react.default.createElement(Connector, {
          key: "connector-".concat(index),
          className: (0, _classnames.default)(classes),
          hasReached: hasReached
        }), _react.default.createElement(Chip, {
          key: key,
          hasReached: hasReached,
          className: (0, _classnames.default)(classes),
          onClick: stepMemo[key]
        }, _react.default.createElement("span", null, value))];
      }));
    }
  }]);
  return Stepper;
}(_react.Component);

Stepper.propTypes = {
  className: _propTypes.default.string,
  steps: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  })),
  selected: _propTypes.default.string,
  onSelect: _propTypes.default.func
};
Stepper.defaultProps = {
  steps: [],
  selected: null,
  onSelect: function onSelect() {}
};

var Chip = _styledComponents.default.div.withConfig({
  displayName: "Stepper__Chip",
  componentId: "sc-1lz3m3h-0"
})(_templateObject(), function (props) {
  return props.theme["$purple-med"];
}, function (props) {
  return props.theme["$purple-med"];
});

var Connector = _styledComponents.default.div.withConfig({
  displayName: "Stepper__Connector",
  componentId: "sc-1lz3m3h-1"
})(_templateObject2(), function (props) {
  return props.theme["$gray-1"];
}, function (props) {
  return props.theme["$gray-2"];
}, function (props) {
  return props.theme["$gray-2"];
}, function (props) {
  return props.theme["$purple-med"];
}, function (props) {
  return props.theme["$purple-med"];
}, function (props) {
  return props.theme["$purple-med"];
}, function (props) {
  return props.theme["$purple-med"];
});

var StyledStepper = _styledComponents.default.div.withConfig({
  displayName: "Stepper__StyledStepper",
  componentId: "sc-1lz3m3h-2"
})(_templateObject3());

Stepper.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Stepper",
  "props": {
    "steps": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "key": {
              "name": "string",
              "required": false
            },
            "value": {
              "name": "union",
              "value": [{
                "name": "string"
              }, {
                "name": "number"
              }],
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": ""
    },
    "selected": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onSelect": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = Stepper;
exports.default = _default;