"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _layout = require("./layout.js");

var _chunkCfb1dc = require("./chunk-cfb1dc74.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  clip: rect(0 0 0 0);\n  @supports (clip-path: polygon(0 0, 0 0, 0 0, 0 0)) {\n    clip-path: polygon(0 0, 0 0, 0 0, 0 0);\n  }\n  overflow: hidden;\n  position: absolute;\n  height: 1px;\n  width: 1px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var IconAltText = _styledComponents.default.span.withConfig({
  displayName: "CFontIcon__IconAltText",
  componentId: "sc-1s5pg4d-0"
})(_templateObject());

var CFontIcon = function CFontIcon(props) {
  var altText = props.altText,
      titleText = props.titleText,
      className = props.className,
      light = props.light,
      iProps = (0, _chunkB2edacfb.j)(props, ["altText", "titleText", "className", "light"]);
  var title = titleText ? titleText : altText;
  return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_layout.Box, (0, _chunkB2edacfb.g)({
    is: "i",
    title: title,
    className: className,
    "aria-hidden": "true",
    color: light ? _chunkCfb1dc.a["$light-tint-70"] : _chunkCfb1dc.a["$gray-5"]
  }, iProps)), altText && _react.default.createElement(IconAltText, null, altText));
};

CFontIcon.propTypes = {
  className: _propTypes.default.string.isRequired,
  altText: _propTypes.default.string,
  titleText: _propTypes.default.string
};
CFontIcon.displayName = "CFontIcon";
CFontIcon.__docgenInfo = {
  "description": "Hides icon from screen readers, adds 'alt text' that's visible to screen readers\nbut visually hidden, adds a title attribute to offer more context on hover",
  "methods": [],
  "displayName": "CFontIcon",
  "props": {
    "className": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "altText": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "titleText": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CFontIcon;
exports.default = _default;
CFontIcon.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CFontIcon",
  "props": {
    "className": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "altText": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "titleText": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};