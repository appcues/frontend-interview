"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CFontIcon = _interopRequireDefault(require("./CFontIcon.js"));

var _CButton = _interopRequireDefault(require("./CButton.js"));

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject3() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  align-items: center;\n  margin: 0 20px -64px;\n\n  height: 64px;\n  min-width: 196px;\n  max-width: 360px;\n  padding: 0 16px;\n  border-radius: 6px;\n\n  pointer-events: all;\n  user-select: none;\n\n  box-shadow: ", ";\n\n  transition: margin-bottom 0.2s cubic-bezier(0.54, 1.12, 0.38, 1.11),\n    filter 0.2s cubic-bezier(0.4, 1, 0.75, 0.9),\n    opacity 0.2s cubic-bezier(0.4, 1, 0.75, 0.9);\n\n  &.toast-enter-done,\n  &.toast-exit {\n    margin-bottom: 20px;\n  }\n  &.toast-exit {\n    opacity: 0;\n    filter: blur(10px);\n  }\n\n  &.standard {\n    color: white;\n    background-color: ", ";\n  }\n  &.success {\n    color: ", ";\n    background-color: ", ";\n  }\n  &.error {\n    color: ", ";\n    background-color: ", ";\n    i {\n      color: ", ";\n    }\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  margin-right: 8px;\n  width: 32px;\n\n  i {\n    color: ", ";\n    font-size: 21px;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  margin-left: 32px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var TOAST_DURATION_IN_MS = 3000;
var TYPES = {
  STANDARD: "standard",
  SUCCESS: "success",
  ERROR: "error"
};

var ToastType = _propTypes.default.oneOf(Object.values(TYPES));

var Toast = function (_PureComponent) {
  (0, _chunkB2edacfb.f)(Toast, _PureComponent);

  function Toast() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, Toast);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(Toast)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "timer", null);
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "onClickAction", function () {
      var _this$props = _this.props,
          action = _this$props.action,
          onDismiss = _this$props.onDismiss;
      action.onClick();
      window.clearTimeout(_this.timer);
      _this.timer = window.setTimeout(onDismiss, 100);
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(Toast, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var onDismiss = this.props.onDismiss;
      this.timer = window.setTimeout(onDismiss, TOAST_DURATION_IN_MS);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.clearTimeout(this.timer);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          message = _this$props2.message,
          type = _this$props2.type,
          action = _this$props2.action;
      return _react.default.createElement(StyledToast, {
        className: (0, _classnames.default)(type)
      }, type === TYPES.SUCCESS && _react.default.createElement(Checkmark, null, _react.default.createElement(_CFontIcon.default, {
        className: "fas fa-check-circle"
      })), type === TYPES.ERROR && _react.default.createElement(Checkmark, null, _react.default.createElement(_CFontIcon.default, {
        className: "fas fa-exclamation-circle"
      })), message, action && type !== TYPES.SUCCESS && _react.default.createElement(ToastActionButton, {
        onClick: this.onClickAction
      }, action.text));
    }
  }]);
  return Toast;
}(_react.PureComponent);

(0, _chunkB2edacfb.h)(Toast, "propTypes", {
  message: _propTypes.default.string.isRequired,
  type: ToastType,
  action: _propTypes.default.shape({
    text: _propTypes.default.string.isRequired,
    onClick: _propTypes.default.func.isRequired
  })
});
(0, _chunkB2edacfb.h)(Toast, "defaultProps", {
  type: TYPES.STANDARD,
  action: null
});
(0, _chunkB2edacfb.h)(Toast, "enums", {
  ToastType: TYPES
});
var ToastActionButton = (0, _styledComponents.default)(_CButton.default).withConfig({
  displayName: "Toast__ToastActionButton",
  componentId: "sc-9hrej6-0"
})(_templateObject());

var Checkmark = _styledComponents.default.div.withConfig({
  displayName: "Toast__Checkmark",
  componentId: "sc-9hrej6-1"
})(_templateObject2(), function (props) {
  return props.theme["$green"];
});

var StyledToast = _styledComponents.default.div.withConfig({
  displayName: "Toast__StyledToast",
  componentId: "sc-9hrej6-2"
})(_templateObject3(), function (props) {
  return props.theme["$box-shadow-3"];
}, function (props) {
  return props.theme["$gray-7"];
}, function (props) {
  return props.theme["$gray-7"];
}, function (props) {
  return props.theme["$green-light"];
}, function (props) {
  return props.theme["$gray-7"];
}, function (props) {
  return props.theme["$red-med"];
}, function (props) {
  return props.theme["$red"];
});

Toast.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "onClickAction",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "Toast",
  "props": {
    "type": {
      "defaultValue": {
        "value": "\"standard\"",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "ToastType"
      },
      "required": false,
      "description": ""
    },
    "action": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "type": {
        "name": "shape",
        "value": {
          "text": {
            "name": "string",
            "required": true
          },
          "onClick": {
            "name": "func",
            "required": true
          }
        }
      },
      "required": false,
      "description": ""
    },
    "message": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    }
  }
};
var _default = Toast;
exports.default = _default;