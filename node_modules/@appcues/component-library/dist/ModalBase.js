"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _style = _interopRequireDefault(require("./style.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Modal = function (_Component) {
  (0, _chunkB2edacfb.f)(Modal, _Component);

  function Modal(props) {
    var _this;

    (0, _chunkB2edacfb.b)(this, Modal);
    _this = (0, _chunkB2edacfb.d)(this, (0, _chunkB2edacfb.e)(Modal).call(this, props));
    var effect = props.effect || "fadeInDown";

    _this.setSize(effect);

    _this.state = {
      visible: props.visible,
      style: _style.default[effect]
    };
    return _this;
  }

  (0, _chunkB2edacfb.c)(Modal, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var visible = _ref.visible,
          _ref$effect = _ref.effect,
          effect = _ref$effect === void 0 ? "fadeInDown" : _ref$effect;
      this.setState({
        visible: visible
      });
      this.setSize(effect);
      this.setStyles(effect);
    }
  }, {
    key: "setStyles",
    value: function setStyles(effect) {
      if (this.props && this.props.styles) {
        _style.default[effect].panel = (0, _chunkB2edacfb.i)({}, _style.default[effect].panel, {}, this.props.styles);
      }
    }
  }, {
    key: "setSize",
    value: function setSize(effect) {
      if (this.props && this.props.width) {
        if (this.props.width.charAt(this.props.width.length - 1) === "%") {
          var width = this.props.width.slice(0, -1);
          _style.default[effect].panel.width = width + "%";
        } else if (this.props.width.charAt(this.props.width.length - 1) === "x") {
          var _width = this.props.width.slice(0, -2);

          _style.default[effect].panel.width = _width + "px";
        } else {
          _style.default[effect].panel.width = this.props.width + "px";
        }
      }

      if (this.props && this.props.height) {
        if (this.props.height.charAt(this.props.height.length - 1) === "%") {
          var height = this.props.height.slice(0, -1);
          _style.default[effect].panel.height = height + "vh";
        } else if (this.props.height.charAt(this.props.height.length - 1) === "x") {
          var _height = this.props.height.slice(0, -2);

          _style.default[effect].panel.height = _height + "px";
        } else {
          _style.default[effect].panel.height = this.props.height + "px";
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        id: "modalBase",
        style: this.state.visible ? this.state.style.container : this.state.style.containerHidden
      }, _react.default.createElement("div", {
        className: "modal-panel",
        style: this.state.visible ? (0, _chunkB2edacfb.i)({}, this.state.style.panel) : this.state.style.panelHidden
      }, this.props.children), _react.default.createElement("div", {
        className: "modal-mask",
        style: this.state.visible ? this.state.style.mask : this.state.style.maskHidden,
        onClick: this.props.onClickAway ? this.props.onClickAway : null
      }));
    }
  }]);
  return Modal;
}(_react.Component);

Modal.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "setStyles",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "effect",
      "type": null
    }],
    "returns": null
  }, {
    "name": "setSize",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "effect",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "Modal"
};
var _default = Modal;
exports.default = _default;