"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOTICE_TYPES = exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TYPES = {
  default: "default",
  primary: "primary",
  secondary: "secondary",
  warning: "warning",
  success: "success",
  error: "error"
};

var getFilteredTypes = function getFilteredTypes(types) {
  if (types) {
    return Object.assign.apply(Object, (0, _chunkB2edacfb.k)(Object.keys(TYPES).filter(function (key) {
      return types.includes(key);
    }).map(function (key) {
      return (0, _chunkB2edacfb.h)({}, key, TYPES[key]);
    })).concat([{}]));
  } else {
    return TYPES;
  }
};

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  &.notice {\n    padding: 1rem 1.125rem;\n    display: flex;\n    align-items: center;\n    border-radius: ", ";\n    margin: 1rem 0;\n    font-size: ", ";\n    justify-content: ", ";\n    cursor: ", ";\n    width: 100%;\n\n    &.alert-default {\n      background-color: ", ";\n      color: ", ";\n    }\n\n    &.alert-primary {\n      background-color: ", ";\n      color: ", ";\n      p {\n        color: ", ";\n      }\n    }\n\n    &.alert-warning {\n      background-color: ", ";\n      color: ", ";\n      p {\n        color: ", ";\n      }\n    }\n\n    &.alert-error {\n      background-color: ", ";\n      color: ", ";\n      p {\n        color: ", ";\n      }\n    }\n\n    &.alert-success {\n      background-color: ", ";\n      font-weight: 400;\n      color: ", ";\n      p {\n        color: ", ";\n      }\n    }\n\n    p {\n      margin: 0 0;\n      padding: 0;\n      font-size: ", ";\n      width: auto;\n    }\n\n    .actions {\n      display: flex;\n      margin-left: 12px;\n      margin-top: -0.125rem;\n      margin-bottom: -0.125rem;\n      margin-right: -0.25rem;\n\n      > :nth-child(2) {\n        margin-left: 12px;\n      }\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var NOTICE_TYPES = getFilteredTypes([TYPES.default, TYPES.primary, TYPES.success, TYPES.warning, TYPES.error]);
exports.NOTICE_TYPES = NOTICE_TYPES;

var Notice = function Notice(_ref) {
  var className = _ref.className,
      type = _ref.type,
      onClick = _ref.onClick,
      actions = _ref.actions,
      children = _ref.children;
  var options = {
    className: "".concat(className ? className : "", " notice alert-").concat(type),
    actions: actions,
    onClick: onClick
  };
  return _react.default.createElement(StyledNotice, options, _react.default.createElement("p", null, children), actions.length > 0 && _react.default.createElement("div", {
    className: "actions"
  }, actions));
};

Notice.propTypes = {
  className: _propTypes.default.string,
  type: _propTypes.default.oneOf(Object.values(NOTICE_TYPES)),
  onClick: _propTypes.default.func,
  actions: _propTypes.default.arrayOf(_propTypes.default.node),
  children: _propTypes.default.node.isRequired
};
Notice.defaultProps = {
  type: TYPES.default,
  actions: []
};
Notice.displayName = "Notice";

var StyledNotice = _styledComponents.default.div.withConfig({
  displayName: "Notice__StyledNotice",
  componentId: "sc-3756op-0"
})(_templateObject(), function (props) {
  return props.theme["$border-radius"];
}, function (props) {
  return props.theme["$font-size-base"];
}, function (props) {
  return props.actions && props.actions.length > 0 ? "space-between" : "flex-start";
}, function (props) {
  return props.onClick ? "pointer" : "default";
}, function (props) {
  return props.theme["$gray-1"];
}, function (props) {
  return props.theme["$gray-8"];
}, function (props) {
  return props.theme["$purple-light"];
}, function (props) {
  return props.theme["$purple-dark"];
}, function (props) {
  return props.theme["$purple-dark"];
}, function (props) {
  return props.theme["$yellow-light"];
}, function (props) {
  return props.theme["$yellow-dark"];
}, function (props) {
  return props.theme["$yellow-dark"];
}, function (props) {
  return props.theme["$red-light"];
}, function (props) {
  return props.theme["$red-dark"];
}, function (props) {
  return props.theme["$red-dark"];
}, function (props) {
  return props.theme["$green-light"];
}, function (props) {
  return props.theme["$green-dark"];
}, function (props) {
  return props.theme["$green-dark"];
}, function (props) {
  return props.theme["$font-size-base"];
});

Notice.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Notice",
  "props": {
    "type": {
      "defaultValue": {
        "value": "TYPES.default",
        "computed": true
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "Object.values(NOTICE_TYPES)"
      },
      "required": false,
      "description": ""
    },
    "actions": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "node"
        }
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    }
  }
};
var _default = Notice;
exports.default = _default;
Notice.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Notice",
  "props": {
    "type": {
      "defaultValue": {
        "value": "\"default\"",
        "computed": false
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "Object.values(NOTICE_TYPES)"
      },
      "required": false,
      "description": ""
    },
    "actions": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "node"
        }
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    }
  }
};