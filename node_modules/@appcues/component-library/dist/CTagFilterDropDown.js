"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _CFilterDropDown = _interopRequireDefault(require("./CFilterDropDown.js"));

var _CTag = _interopRequireDefault(require("./CTag.js"));

require("react-dom");

require("styled-components");

require("classnames");

require("prop-types");

require("./CDropDown.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-5423f15f.js");

require("./chunk-5ef88ed1.js");

require("./CFontIcon.js");

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

require("./MenuList.js");

require("./MultiSelectMenuList.js");

require("./MultiSelectOption.js");

require("./CheckboxIndicator.js");

require("./Option.js");

require("./FilterMenu.js");

require("./CLink.js");

require("react-router-dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CTagFilterDropDown = function CTagFilterDropDown(props) {
  return _react.default.createElement(_CFilterDropDown.default, (0, _chunkB2edacfb.g)({
    noOptionsMessage: function noOptionsMessage() {
      return "No tags found.";
    }
  }, props, {
    components: {
      InnerOption: InnerOption
    }
  }));
};

CTagFilterDropDown.propTypes = _CFilterDropDown.default.propTypes;
CTagFilterDropDown.defaultProps = (0, _chunkB2edacfb.i)({}, _CFilterDropDown.default.defaultProps, {
  indicatorIconClass: "fas fa-tag"
});
CTagFilterDropDown.displayName = "CTagFilterDropDown";

var InnerOption = function InnerOption(_ref) {
  var isHovering = _ref.isHovering,
      isSelected = _ref.isSelected,
      props = (0, _chunkB2edacfb.j)(_ref, ["isHovering", "isSelected"]);
  return _react.default.createElement(_CTag.default, (0, _chunkB2edacfb.g)({}, props, {
    forceHover: isHovering
  }));
};

CTagFilterDropDown.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CTagFilterDropDown",
  "props": {
    "indicatorIconClass": {
      "defaultValue": {
        "value": "\"fas fa-tag\"",
        "computed": false
      },
      "required": false
    }
  },
  "composes": ["../CFilterDropDown/CFilterDropDown"]
};
var _default = CTagFilterDropDown;
exports.default = _default;
CTagFilterDropDown.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CTagFilterDropDown",
  "composes": ["./CFilterDropDown.js"]
};