"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _layout = require("./layout.js");

var _CFontIcon = _interopRequireDefault(require("./CFontIcon.js"));

require("./chunk-b15f6972.js");

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject2() {
  var data = (0, _chunkB2edacfb.a)(["\n  font-weight: 600;\n  text-decoration: none;\n  cursor: pointer;\n\n  transition: color 0.2s ease;\n\n  color: ", ";\n\n  &:hover,\n  &.forceHover {\n    color: ", ";\n  }\n\n  &.isDisabled {\n    color: #a1d5f2;\n    pointer-events: none;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  margin-left: 0.4rem;\n  font-size: 84%;\n\n  svg {\n    vertical-align: -0.075em;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var CLink = function CLink(_ref) {
  var className = _ref.className,
      isDisabled = _ref.isDisabled,
      forceHover = _ref.forceHover,
      isExternal = _ref.isExternal,
      ignoreWarning = _ref.ignoreWarning,
      children = _ref.children,
      linkProps = (0, _chunkB2edacfb.j)(_ref, ["className", "isDisabled", "forceHover", "isExternal", "ignoreWarning", "children"]);
  var overrideProps = {};
  var hasHref = !!linkProps.href;
  var isHrefInvalid = hasHref && (linkProps.href.includes("https://") || linkProps.href.includes("http://"));

  if (isExternal || !hasHref || isHrefInvalid) {
    if (isExternal) {
      overrideProps = {
        target: "_blank",
        rel: "noopener noreferrer"
      };
    }
  } else {
    overrideProps = {
      is: _reactRouterDom.Link,
      to: linkProps.href
    };
  }

  return _react.default.createElement(StyledLink, (0, _chunkB2edacfb.g)({
    is: "a",
    className: (0, _classnames.default)(className, isDisabled && "isDisabled", forceHover && "forceHover", isExternal && "isExternal")
  }, linkProps, overrideProps), children);
};

CLink.propTypes = {
  children: _propTypes.default.node.isRequired,
  isDisabled: _propTypes.default.bool,
  forceHover: _propTypes.default.bool,
  ignoreWarning: _propTypes.default.bool,
  className: _propTypes.default.string
};
CLink.defaultProps = {
  isDisabled: false,
  isExternal: false,
  forceHover: false,
  ignoreWarning: false
};
CLink.displayName = "CLink";
var ExternalIcon = (0, _styledComponents.default)(_CFontIcon.default).withConfig({
  displayName: "CLink__ExternalIcon",
  componentId: "sc-1b8r1ds-0"
})(_templateObject());
var StyledLink = (0, _styledComponents.default)(_layout.Box).withConfig({
  displayName: "CLink__StyledLink",
  componentId: "sc-1b8r1ds-1"
})(_templateObject2(), function (props) {
  return props.theme["$blue"];
}, function (props) {
  return props.theme["$blue-dark"];
});
CLink.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CLink",
  "props": {
    "isDisabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isExternal": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "required": false
    },
    "forceHover": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "ignoreWarning": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};
var _default = CLink;
exports.default = _default;
CLink.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CLink",
  "props": {
    "isDisabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isExternal": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "required": false
    },
    "forceHover": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "ignoreWarning": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};