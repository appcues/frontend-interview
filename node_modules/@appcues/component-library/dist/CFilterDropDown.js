"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chunkB2edacfb = require("./chunk-b2edacfb.js");

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CDropDown = _interopRequireDefault(require("./CDropDown.js"));

var _FilterMenu = _interopRequireDefault(require("./FilterMenu.js"));

require("./chunk-6104512b.js");

require("./chunk-76875e58.js");

require("./chunk-cb015231.js");

require("./chunk-f2932d1d.js");

require("./chunk-eb19ede6.js");

require("./chunk-8219403d.js");

require("./chunk-5423f15f.js");

require("./chunk-5ef88ed1.js");

require("./CFontIcon.js");

require("./layout.js");

require("./chunk-b15f6972.js");

require("./chunk-cfb1dc74.js");

require("./chunk-e8276423.js");

require("./MenuList.js");

require("./MultiSelectMenuList.js");

require("./MultiSelectOption.js");

require("./CheckboxIndicator.js");

require("./Option.js");

require("./CLink.js");

require("react-router-dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject() {
  var data = (0, _chunkB2edacfb.a)(["\n  &.filter-dropdown {\n    display: inline-block;\n    min-width: 96px;\n    max-width: 100%;\n\n    &.has-value,\n    &:hover {\n      .dropdown__control {\n        background-color: ", ";\n      }\n    }\n\n    .dropdown__control {\n      flex-direction: row-reverse;\n      border-color: transparent;\n      transition: background-color 0.2s ease;\n\n      &.dropdown__control--is-disabled {\n        background-color: transparent;\n\n        .dropdown__indicator {\n          color: ", ";\n        }\n      }\n\n      &.dropdown__control--is-focused {\n        border-color: transparent;\n      }\n\n      &.dropdown__control--is-disabled {\n        .dropdown__placeholder,\n        .dropdown__single-value,\n        .dropdown__value-container--is-multi {\n          color: ", ";\n        }\n      }\n    }\n\n    &:hover {\n      .dropdown__placeholder,\n      .dropdown__single-value,\n      .dropdown__value-container--is-multi {\n        color: ", ";\n      }\n    }\n\n    .dropdown__indicator {\n      font-size: 16px;\n      padding: 0 6px 0 14px;\n    }\n\n    .dropdown__single-value,\n    .dropdown__value-container--is-multi {\n      position: relative;\n      transform: none;\n      max-width: none;\n    }\n\n    .dropdown__placeholder,\n    .dropdown__single-value,\n    .dropdown__value-container--is-multi {\n      font-weight: 600;\n      color: ", ";\n    }\n\n    .dropdown__value-container {\n      padding: 2px 14px 2px 4px;\n      overflow: hidden;\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var CFilterDropDown = function (_Component) {
  (0, _chunkB2edacfb.f)(CFilterDropDown, _Component);

  function CFilterDropDown() {
    var _getPrototypeOf2;

    var _this;

    (0, _chunkB2edacfb.b)(this, CFilterDropDown);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _chunkB2edacfb.d)(this, (_getPrototypeOf2 = (0, _chunkB2edacfb.e)(CFilterDropDown)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "state", {
      valueWidth: null,
      hasValue: false
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "ref", _react.default.createRef());
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "setStateBasedOnValue", function () {
      _this.setHasValue();

      _this.setValueWidth();
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "setHasValue", function () {
      var value = _this.props.value;
      var hasValue = _this.state.hasValue;
      var isValueEmpty = !value || value.length === 0;

      if (!isValueEmpty !== hasValue) {
        _this.setState({
          hasValue: !isValueEmpty
        });
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "setValueWidth", function () {
      if (!_this.ref.current) {
        return;
      }

      var placeholder = (0, _reactDom.findDOMNode)(_this.ref.current).getElementsByClassName("dropdown__placeholder");
      var singleValue = (0, _reactDom.findDOMNode)(_this.ref.current).getElementsByClassName("dropdown__single-value");
      var displayValue = (0, _reactDom.findDOMNode)(_this.ref.current).getElementsByClassName("dropdown__displayvalue");
      var value = placeholder.item(0) || singleValue.item(0) || displayValue.item(0);

      if (value && value.offsetWidth !== 1) {
        _this.setState({
          valueWidth: value.offsetWidth
        });
      } else {
        window.setTimeout(_this.setValueWidth, 500);
      }
    });
    (0, _chunkB2edacfb.h)((0, _chunkB2edacfb.m)(_this), "FilterMenu", function (filterProps) {
      return _react.default.createElement(_FilterMenu.default, {
        filterProps: filterProps,
        isClearable: _this.props.isClearable,
        selectRef: _this.ref
      });
    });
    return _this;
  }

  (0, _chunkB2edacfb.c)(CFilterDropDown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setStateBasedOnValue();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.value !== this.props.value) {
        this.setStateBasedOnValue();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          components = _this$props.components,
          selectedByDefault = _this$props.selectedByDefault,
          noOptionsMessage = _this$props.noOptionsMessage,
          dropDownProps = (0, _chunkB2edacfb.j)(_this$props, ["className", "components", "selectedByDefault", "noOptionsMessage"]);
      var _this$state = this.state,
          valueWidth = _this$state.valueWidth,
          hasValue = _this$state.hasValue;
      return _react.default.createElement(StyledFilterDropDown, (0, _chunkB2edacfb.g)({}, dropDownProps, {
        noOptionsMessage: noOptionsMessage,
        ref: this.ref,
        selectedByDefault: selectedByDefault,
        className: (0, _classnames.default)(className, "filter-dropdown", hasValue && "has-value"),
        components: (0, _chunkB2edacfb.i)({
          Menu: this.FilterMenu
        }, components),
        valueWidth: valueWidth
      }));
    }
  }]);
  return CFilterDropDown;
}(_react.Component);

CFilterDropDown.propTypes = (0, _chunkB2edacfb.i)({}, _CDropDown.default.propTypes, {
  isClearable: _propTypes.default.bool,
  noOptionsMessage: _propTypes.default.func
});
CFilterDropDown.defaultProps = (0, _chunkB2edacfb.i)({}, _CDropDown.default.defaultProps, {
  selectedByDefault: false,
  isClearable: true,
  indicatorIconClass: "fas fa-user-circle"
});
CFilterDropDown.displayName = "CFilterDropDown";
var StyledFilterDropDown = (0, _styledComponents.default)(_CDropDown.default).withConfig({
  displayName: "CFilterDropDown__StyledFilterDropDown",
  componentId: "roq9ln-0"
})(_templateObject(), function (props) {
  return props.selectedByDefault ? "transparent" : props.theme["$gray-2"];
}, function (props) {
  return props.theme["$gray-4"];
}, function (props) {
  return props.theme["$gray-5"];
}, function (props) {
  return props.theme["$gray-8"];
}, function (props) {
  return props.theme["$gray-7"];
});
CFilterDropDown.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "setStateBasedOnValue",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "setHasValue",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "setValueWidth",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "FilterMenu",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "filterProps",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "CFilterDropDown",
  "props": {
    "selectedByDefault": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "required": false
    },
    "isClearable": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "indicatorIconClass": {
      "defaultValue": {
        "value": "\"fas fa-user-circle\"",
        "computed": false
      },
      "required": false
    },
    "noOptionsMessage": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    }
  },
  "composes": ["../CDropDown/CDropDown"]
};
var _default = CFilterDropDown;
exports.default = _default;